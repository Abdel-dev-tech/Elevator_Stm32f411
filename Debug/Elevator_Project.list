
Elevator_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005128  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080052c8  080052c8  000152c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005328  08005328  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08005328  08005328  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005328  08005328  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005328  08005328  00015328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800532c  0800532c  0001532c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042e4  20000014  08005344  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200042f8  08005344  000242f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012bc9  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302c  00000000  00000000  00032c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00035c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00036ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018171  00000000  00000000  00037838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010e18  00000000  00000000  0004f9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000950e0  00000000  00000000  000607c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f58a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b18  00000000  00000000  000f58f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052b0 	.word	0x080052b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080052b0 	.word	0x080052b0

080001e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001e0:	b480      	push	{r7}
 80001e2:	b085      	sub	sp, #20
 80001e4:	af00      	add	r7, sp, #0
 80001e6:	60f8      	str	r0, [r7, #12]
 80001e8:	60b9      	str	r1, [r7, #8]
 80001ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <vApplicationGetIdleTaskMemory+0x2c>)
 80001f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	4a06      	ldr	r2, [pc, #24]	; (8000210 <vApplicationGetIdleTaskMemory+0x30>)
 80001f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001fe:	bf00      	nop
 8000200:	3714      	adds	r7, #20
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20000030 	.word	0x20000030
 8000210:	20000084 	.word	0x20000084

08000214 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000214:	b5b0      	push	{r4, r5, r7, lr}
 8000216:	b08e      	sub	sp, #56	; 0x38
 8000218:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021a:	f000 fde1 	bl	8000de0 <HAL_Init>

  /* Configure the system clock */
//  SystemClock_Config();

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800021e:	f000 f855 	bl	80002cc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000222:	f000 f873 	bl	800030c <MX_GPIO_Init>
  Init_OnBoard_LEDs();
 8000226:	f000 fc4b 	bl	8000ac0 <Init_OnBoard_LEDs>
  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  semLightControl    = xSemaphoreCreateBinary();
 800022a:	2203      	movs	r2, #3
 800022c:	2100      	movs	r1, #0
 800022e:	2001      	movs	r0, #1
 8000230:	f003 f8b0 	bl	8003394 <xQueueGenericCreate>
 8000234:	4603      	mov	r3, r0
 8000236:	4a1e      	ldr	r2, [pc, #120]	; (80002b0 <main+0x9c>)
 8000238:	6013      	str	r3, [r2, #0]
  semCausingDeadlock = xSemaphoreCreateBinary();
 800023a:	2203      	movs	r2, #3
 800023c:	2100      	movs	r1, #0
 800023e:	2001      	movs	r0, #1
 8000240:	f003 f8a8 	bl	8003394 <xQueueGenericCreate>
 8000244:	4603      	mov	r3, r0
 8000246:	4a1b      	ldr	r2, [pc, #108]	; (80002b4 <main+0xa0>)
 8000248:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of prvLightTraffic */

  /*Create the Elevator queue*/
  xElevatorQueue= xQueueCreate( 100, sizeof( uint8_t ) );
 800024a:	2200      	movs	r2, #0
 800024c:	2101      	movs	r1, #1
 800024e:	2064      	movs	r0, #100	; 0x64
 8000250:	f003 f8a0 	bl	8003394 <xQueueGenericCreate>
 8000254:	4603      	mov	r3, r0
 8000256:	4a18      	ldr	r2, [pc, #96]	; (80002b8 <main+0xa4>)
 8000258:	6013      	str	r3, [r2, #0]
  if( xElevatorQueue != NULL )
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <main+0xa4>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d023      	beq.n	80002aa <main+0x96>
  {
      /* Queue was not created and must not be used. */

		  osThreadDef(prvLightTraffic, StartDefaultTask, osPriorityNormal, 0, 128);
 8000262:	4b16      	ldr	r3, [pc, #88]	; (80002bc <main+0xa8>)
 8000264:	f107 041c 	add.w	r4, r7, #28
 8000268:	461d      	mov	r5, r3
 800026a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800026c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800026e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  prvLightTrafficHandle = osThreadCreate(osThread(prvLightTraffic), NULL);
 8000276:	f107 031c 	add.w	r3, r7, #28
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f002 fee0 	bl	8003042 <osThreadCreate>
 8000282:	4603      	mov	r3, r0
 8000284:	4a0e      	ldr	r2, [pc, #56]	; (80002c0 <main+0xac>)
 8000286:	6013      	str	r3, [r2, #0]

		  osThreadDef(prvUserButton, prvUserButtonTask, osPriorityNormal, 0, 128);
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <main+0xb0>)
 800028a:	463c      	mov	r4, r7
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  prvUserButtonHandle = osThreadCreate(osThread(prvUserButton), NULL);
 800029a:	463b      	mov	r3, r7
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f002 fecf 	bl	8003042 <osThreadCreate>
 80002a4:	4603      	mov	r3, r0
 80002a6:	4a08      	ldr	r2, [pc, #32]	; (80002c8 <main+0xb4>)
 80002a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002aa:	f002 fec3 	bl	8003034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ae:	e7fe      	b.n	80002ae <main+0x9a>
 80002b0:	2000028c 	.word	0x2000028c
 80002b4:	20000290 	.word	0x20000290
 80002b8:	20000298 	.word	0x20000298
 80002bc:	080052e8 	.word	0x080052e8
 80002c0:	20000284 	.word	0x20000284
 80002c4:	08005304 	.word	0x08005304
 80002c8:	20000288 	.word	0x20000288

080002cc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b086      	sub	sp, #24
 80002d0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002d2:	463b      	mov	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	605a      	str	r2, [r3, #4]
 80002da:	609a      	str	r2, [r3, #8]
 80002dc:	60da      	str	r2, [r3, #12]
 80002de:	611a      	str	r2, [r3, #16]
 80002e0:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80002e2:	2301      	movs	r3, #1
 80002e4:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80002e6:	23c8      	movs	r3, #200	; 0xc8
 80002e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80002ea:	2305      	movs	r3, #5
 80002ec:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80002f2:	463b      	mov	r3, r7
 80002f4:	4618      	mov	r0, r3
 80002f6:	f002 f9cf 	bl	8002698 <HAL_RCCEx_PeriphCLKConfig>
 80002fa:	4603      	mov	r3, r0
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000300:	f000 fbd8 	bl	8000ab4 <Error_Handler>
  }
}
 8000304:	bf00      	nop
 8000306:	3718      	adds	r7, #24
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b08c      	sub	sp, #48	; 0x30
 8000310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000312:	f107 031c 	add.w	r3, r7, #28
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
 800031a:	605a      	str	r2, [r3, #4]
 800031c:	609a      	str	r2, [r3, #8]
 800031e:	60da      	str	r2, [r3, #12]
 8000320:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
 8000326:	4b5b      	ldr	r3, [pc, #364]	; (8000494 <MX_GPIO_Init+0x188>)
 8000328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032a:	4a5a      	ldr	r2, [pc, #360]	; (8000494 <MX_GPIO_Init+0x188>)
 800032c:	f043 0310 	orr.w	r3, r3, #16
 8000330:	6313      	str	r3, [r2, #48]	; 0x30
 8000332:	4b58      	ldr	r3, [pc, #352]	; (8000494 <MX_GPIO_Init+0x188>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	f003 0310 	and.w	r3, r3, #16
 800033a:	61bb      	str	r3, [r7, #24]
 800033c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
 8000342:	4b54      	ldr	r3, [pc, #336]	; (8000494 <MX_GPIO_Init+0x188>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000346:	4a53      	ldr	r2, [pc, #332]	; (8000494 <MX_GPIO_Init+0x188>)
 8000348:	f043 0304 	orr.w	r3, r3, #4
 800034c:	6313      	str	r3, [r2, #48]	; 0x30
 800034e:	4b51      	ldr	r3, [pc, #324]	; (8000494 <MX_GPIO_Init+0x188>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	f003 0304 	and.w	r3, r3, #4
 8000356:	617b      	str	r3, [r7, #20]
 8000358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
 800035e:	4b4d      	ldr	r3, [pc, #308]	; (8000494 <MX_GPIO_Init+0x188>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a4c      	ldr	r2, [pc, #304]	; (8000494 <MX_GPIO_Init+0x188>)
 8000364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
 800036a:	4b4a      	ldr	r3, [pc, #296]	; (8000494 <MX_GPIO_Init+0x188>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000372:	613b      	str	r3, [r7, #16]
 8000374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
 800037a:	4b46      	ldr	r3, [pc, #280]	; (8000494 <MX_GPIO_Init+0x188>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a45      	ldr	r2, [pc, #276]	; (8000494 <MX_GPIO_Init+0x188>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
 8000386:	4b43      	ldr	r3, [pc, #268]	; (8000494 <MX_GPIO_Init+0x188>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	60fb      	str	r3, [r7, #12]
 8000390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	2300      	movs	r3, #0
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	4b3f      	ldr	r3, [pc, #252]	; (8000494 <MX_GPIO_Init+0x188>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a3e      	ldr	r2, [pc, #248]	; (8000494 <MX_GPIO_Init+0x188>)
 800039c:	f043 0302 	orr.w	r3, r3, #2
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
 80003a2:	4b3c      	ldr	r3, [pc, #240]	; (8000494 <MX_GPIO_Init+0x188>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	f003 0302 	and.w	r3, r3, #2
 80003aa:	60bb      	str	r3, [r7, #8]
 80003ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ae:	2300      	movs	r3, #0
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	4b38      	ldr	r3, [pc, #224]	; (8000494 <MX_GPIO_Init+0x188>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a37      	ldr	r2, [pc, #220]	; (8000494 <MX_GPIO_Init+0x188>)
 80003b8:	f043 0308 	orr.w	r3, r3, #8
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
 80003be:	4b35      	ldr	r3, [pc, #212]	; (8000494 <MX_GPIO_Init+0x188>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c2:	f003 0308 	and.w	r3, r3, #8
 80003c6:	607b      	str	r3, [r7, #4]
 80003c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80003ca:	2200      	movs	r2, #0
 80003cc:	2108      	movs	r1, #8
 80003ce:	4832      	ldr	r0, [pc, #200]	; (8000498 <MX_GPIO_Init+0x18c>)
 80003d0:	f001 f81e 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80003d4:	2201      	movs	r2, #1
 80003d6:	2101      	movs	r1, #1
 80003d8:	4830      	ldr	r0, [pc, #192]	; (800049c <MX_GPIO_Init+0x190>)
 80003da:	f001 f819 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80003de:	2200      	movs	r2, #0
 80003e0:	f24f 0130 	movw	r1, #61488	; 0xf030
 80003e4:	482e      	ldr	r0, [pc, #184]	; (80004a0 <MX_GPIO_Init+0x194>)
 80003e6:	f001 f813 	bl	8001410 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80003ea:	2304      	movs	r3, #4
 80003ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003ee:	2300      	movs	r3, #0
 80003f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80003f6:	f107 031c 	add.w	r3, r7, #28
 80003fa:	4619      	mov	r1, r3
 80003fc:	4826      	ldr	r0, [pc, #152]	; (8000498 <MX_GPIO_Init+0x18c>)
 80003fe:	f000 fe6b 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000402:	2308      	movs	r3, #8
 8000404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000406:	2301      	movs	r3, #1
 8000408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800040e:	2300      	movs	r3, #0
 8000410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000412:	f107 031c 	add.w	r3, r7, #28
 8000416:	4619      	mov	r1, r3
 8000418:	481f      	ldr	r0, [pc, #124]	; (8000498 <MX_GPIO_Init+0x18c>)
 800041a:	f000 fe5d 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800041e:	2332      	movs	r3, #50	; 0x32
 8000420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000422:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000426:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000428:	2300      	movs	r3, #0
 800042a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800042c:	f107 031c 	add.w	r3, r7, #28
 8000430:	4619      	mov	r1, r3
 8000432:	4819      	ldr	r0, [pc, #100]	; (8000498 <MX_GPIO_Init+0x18c>)
 8000434:	f000 fe50 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000438:	2301      	movs	r3, #1
 800043a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043c:	2301      	movs	r3, #1
 800043e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000440:	2300      	movs	r3, #0
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000444:	2300      	movs	r3, #0
 8000446:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	4619      	mov	r1, r3
 800044e:	4813      	ldr	r0, [pc, #76]	; (800049c <MX_GPIO_Init+0x190>)
 8000450:	f000 fe42 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000454:	2301      	movs	r3, #1
 8000456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000458:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800045c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f107 031c 	add.w	r3, r7, #28
 8000466:	4619      	mov	r1, r3
 8000468:	480e      	ldr	r0, [pc, #56]	; (80004a4 <MX_GPIO_Init+0x198>)
 800046a:	f000 fe35 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin PD5 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800046e:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000472:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000474:	2301      	movs	r3, #1
 8000476:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000478:	2300      	movs	r3, #0
 800047a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	2300      	movs	r3, #0
 800047e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000480:	f107 031c 	add.w	r3, r7, #28
 8000484:	4619      	mov	r1, r3
 8000486:	4806      	ldr	r0, [pc, #24]	; (80004a0 <MX_GPIO_Init+0x194>)
 8000488:	f000 fe26 	bl	80010d8 <HAL_GPIO_Init>

}
 800048c:	bf00      	nop
 800048e:	3730      	adds	r7, #48	; 0x30
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40023800 	.word	0x40023800
 8000498:	40021000 	.word	0x40021000
 800049c:	40020800 	.word	0x40020800
 80004a0:	40020c00 	.word	0x40020c00
 80004a4:	40020000 	.word	0x40020000

080004a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */

  /* USER CODE BEGIN 5 */
	Init_OnBoard_LEDs();
 80004b0:	f000 fb06 	bl	8000ac0 <Init_OnBoard_LEDs>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6,GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f24f 4150 	movw	r1, #62544	; 0xf450
 80004ba:	48c6      	ldr	r0, [pc, #792]	; (80007d4 <StartDefaultTask+0x32c>)
 80004bc:	f000 ffa8 	bl	8001410 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	48c4      	ldr	r0, [pc, #784]	; (80007d8 <StartDefaultTask+0x330>)
 80004c8:	f000 ffa2 	bl	8001410 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2120      	movs	r1, #32
 80004d0:	48c0      	ldr	r0, [pc, #768]	; (80007d4 <StartDefaultTask+0x32c>)
 80004d2:	f000 ff9d 	bl	8001410 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	48c0      	ldr	r0, [pc, #768]	; (80007dc <StartDefaultTask+0x334>)
 80004dc:	f000 ff98 	bl	8001410 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2101      	movs	r1, #1
 80004e4:	48bd      	ldr	r0, [pc, #756]	; (80007dc <StartDefaultTask+0x334>)
 80004e6:	f000 ff93 	bl	8001410 <HAL_GPIO_WritePin>
  ElevatorCommands_Def commands;
  /* Infinite loop */
  for(;;)
  {
       // The elevator is in floor 1
	  if(ElevatorState==floor1)
 80004ea:	4bbd      	ldr	r3, [pc, #756]	; (80007e0 <StartDefaultTask+0x338>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	f040 80c0 	bne.w	8000674 <StartDefaultTask+0x1cc>
	  {
		  /*Turn On LED of the floor 1*/
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	2140      	movs	r1, #64	; 0x40
 80004f8:	48b7      	ldr	r0, [pc, #732]	; (80007d8 <StartDefaultTask+0x330>)
 80004fa:	f000 ff89 	bl	8001410 <HAL_GPIO_WritePin>

		  if(commands==floor2_down_Button ||commands==floor2_up_Button ||(commands==elevator_toFloor2_Btn)){
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	2b02      	cmp	r3, #2
 8000502:	d005      	beq.n	8000510 <StartDefaultTask+0x68>
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	2b03      	cmp	r3, #3
 8000508:	d002      	beq.n	8000510 <StartDefaultTask+0x68>
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	2b06      	cmp	r3, #6
 800050e:	d14a      	bne.n	80005a6 <StartDefaultTask+0xfe>
			  //turn on the blue led if floor2
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 8000510:	2201      	movs	r2, #1
 8000512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000516:	48af      	ldr	r0, [pc, #700]	; (80007d4 <StartDefaultTask+0x32c>)
 8000518:	f000 ff7a 	bl	8001410 <HAL_GPIO_WritePin>
			  /*Turn Off the red LED of floor 1,2,3*/
			  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	48ad      	ldr	r0, [pc, #692]	; (80007d8 <StartDefaultTask+0x330>)
 8000522:	f000 ff75 	bl	8001410 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2110      	movs	r1, #16
 800052a:	48ac      	ldr	r0, [pc, #688]	; (80007dc <StartDefaultTask+0x334>)
 800052c:	f000 ff70 	bl	8001410 <HAL_GPIO_WritePin>
			  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2110      	movs	r1, #16
 8000534:	48a8      	ldr	r0, [pc, #672]	; (80007d8 <StartDefaultTask+0x330>)
 8000536:	f000 ff6b 	bl	8001410 <HAL_GPIO_WritePin>
			  ElevatorState=moving;
 800053a:	4ba9      	ldr	r3, [pc, #676]	; (80007e0 <StartDefaultTask+0x338>)
 800053c:	2204      	movs	r2, #4
 800053e:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(4000);
 8000540:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000544:	f000 fcbe 	bl	8000ec4 <HAL_Delay>
			  //turn on the red led of floor2
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 8000548:	2201      	movs	r2, #1
 800054a:	2110      	movs	r1, #16
 800054c:	48a3      	ldr	r0, [pc, #652]	; (80007dc <StartDefaultTask+0x334>)
 800054e:	f000 ff5f 	bl	8001410 <HAL_GPIO_WritePin>
			  ////BUZZER//////
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	2101      	movs	r1, #1
 8000556:	48a1      	ldr	r0, [pc, #644]	; (80007dc <StartDefaultTask+0x334>)
 8000558:	f000 ff5a 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 800055c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000560:	f000 fcb0 	bl	8000ec4 <HAL_Delay>
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000564:	2200      	movs	r2, #0
 8000566:	2101      	movs	r1, #1
 8000568:	489c      	ldr	r0, [pc, #624]	; (80007dc <StartDefaultTask+0x334>)
 800056a:	f000 ff51 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 800056e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000572:	f000 fca7 	bl	8000ec4 <HAL_Delay>
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000576:	2201      	movs	r2, #1
 8000578:	2101      	movs	r1, #1
 800057a:	4898      	ldr	r0, [pc, #608]	; (80007dc <StartDefaultTask+0x334>)
 800057c:	f000 ff48 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 8000580:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000584:	f000 fc9e 	bl	8000ec4 <HAL_Delay>
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	4893      	ldr	r0, [pc, #588]	; (80007dc <StartDefaultTask+0x334>)
 800058e:	f000 ff3f 	bl	8001410 <HAL_GPIO_WritePin>
			  ////////////////
			  //turn off the blue led if floor2
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000598:	488e      	ldr	r0, [pc, #568]	; (80007d4 <StartDefaultTask+0x32c>)
 800059a:	f000 ff39 	bl	8001410 <HAL_GPIO_WritePin>
			  ElevatorState=floor2;
 800059e:	4b90      	ldr	r3, [pc, #576]	; (80007e0 <StartDefaultTask+0x338>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	701a      	strb	r2, [r3, #0]
 80005a4:	e061      	b.n	800066a <StartDefaultTask+0x1c2>
		  }
		  else if((commands==floor3_Button)||(commands==elevator_toFloor3_Btn)){
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d002      	beq.n	80005b2 <StartDefaultTask+0x10a>
 80005ac:	7bfb      	ldrb	r3, [r7, #15]
 80005ae:	2b07      	cmp	r3, #7
 80005b0:	d15b      	bne.n	800066a <StartDefaultTask+0x1c2>
			  //turn on the blue led of floor3
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005b8:	4886      	ldr	r0, [pc, #536]	; (80007d4 <StartDefaultTask+0x32c>)
 80005ba:	f000 ff29 	bl	8001410 <HAL_GPIO_WritePin>
			  /*Turn Off the red LED of floor 1,2,3*/
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	4885      	ldr	r0, [pc, #532]	; (80007d8 <StartDefaultTask+0x330>)
 80005c4:	f000 ff24 	bl	8001410 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2110      	movs	r1, #16
 80005cc:	4883      	ldr	r0, [pc, #524]	; (80007dc <StartDefaultTask+0x334>)
 80005ce:	f000 ff1f 	bl	8001410 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2110      	movs	r1, #16
 80005d6:	4880      	ldr	r0, [pc, #512]	; (80007d8 <StartDefaultTask+0x330>)
 80005d8:	f000 ff1a 	bl	8001410 <HAL_GPIO_WritePin>
			  ElevatorState=moving;
 80005dc:	4b80      	ldr	r3, [pc, #512]	; (80007e0 <StartDefaultTask+0x338>)
 80005de:	2204      	movs	r2, #4
 80005e0:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(6000);
 80005e2:	f241 7070 	movw	r0, #6000	; 0x1770
 80005e6:	f000 fc6d 	bl	8000ec4 <HAL_Delay>
			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2110      	movs	r1, #16
 80005ee:	487a      	ldr	r0, [pc, #488]	; (80007d8 <StartDefaultTask+0x330>)
 80005f0:	f000 ff0e 	bl	8001410 <HAL_GPIO_WritePin>
			  ////BUZZER//////
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2101      	movs	r1, #1
 80005f8:	4878      	ldr	r0, [pc, #480]	; (80007dc <StartDefaultTask+0x334>)
 80005fa:	f000 ff09 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 80005fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000602:	f000 fc5f 	bl	8000ec4 <HAL_Delay>
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2101      	movs	r1, #1
 800060a:	4874      	ldr	r0, [pc, #464]	; (80007dc <StartDefaultTask+0x334>)
 800060c:	f000 ff00 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 8000610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000614:	f000 fc56 	bl	8000ec4 <HAL_Delay>
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2101      	movs	r1, #1
 800061c:	486f      	ldr	r0, [pc, #444]	; (80007dc <StartDefaultTask+0x334>)
 800061e:	f000 fef7 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 8000622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000626:	f000 fc4d 	bl	8000ec4 <HAL_Delay>
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2101      	movs	r1, #1
 800062e:	486b      	ldr	r0, [pc, #428]	; (80007dc <StartDefaultTask+0x334>)
 8000630:	f000 feee 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 8000634:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000638:	f000 fc44 	bl	8000ec4 <HAL_Delay>
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 800063c:	2201      	movs	r2, #1
 800063e:	2101      	movs	r1, #1
 8000640:	4866      	ldr	r0, [pc, #408]	; (80007dc <StartDefaultTask+0x334>)
 8000642:	f000 fee5 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_Delay(500);
 8000646:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800064a:	f000 fc3b 	bl	8000ec4 <HAL_Delay>
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	2101      	movs	r1, #1
 8000652:	4862      	ldr	r0, [pc, #392]	; (80007dc <StartDefaultTask+0x334>)
 8000654:	f000 fedc 	bl	8001410 <HAL_GPIO_WritePin>
			  ////////////////
			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800065e:	485d      	ldr	r0, [pc, #372]	; (80007d4 <StartDefaultTask+0x32c>)
 8000660:	f000 fed6 	bl	8001410 <HAL_GPIO_WritePin>
			  ElevatorState=floor3;
 8000664:	4b5e      	ldr	r3, [pc, #376]	; (80007e0 <StartDefaultTask+0x338>)
 8000666:	2203      	movs	r2, #3
 8000668:	701a      	strb	r2, [r3, #0]
		  }
		  /*Wait for 3 seconds to get elevator empty*/
		  HAL_Delay(3000);
 800066a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800066e:	f000 fc29 	bl	8000ec4 <HAL_Delay>
 8000672:	e151      	b.n	8000918 <StartDefaultTask+0x470>
	  }
	  else if((ElevatorState==floor2)) // The elevator is in floor 2
 8000674:	4b5a      	ldr	r3, [pc, #360]	; (80007e0 <StartDefaultTask+0x338>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b02      	cmp	r3, #2
 800067a:	f040 80b3 	bne.w	80007e4 <StartDefaultTask+0x33c>
	  {
		  /*Turn On LED of the floor 2*/
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2110      	movs	r1, #16
 8000682:	4856      	ldr	r0, [pc, #344]	; (80007dc <StartDefaultTask+0x334>)
 8000684:	f000 fec4 	bl	8001410 <HAL_GPIO_WritePin>

		  if(commands==floor1_Button ||(commands==elevator_toFloor1_Btn)){
 8000688:	7bfb      	ldrb	r3, [r7, #15]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d002      	beq.n	8000694 <StartDefaultTask+0x1ec>
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	2b05      	cmp	r3, #5
 8000692:	d138      	bne.n	8000706 <StartDefaultTask+0x25e>
		  			  //turn on the blue led if floor1
		  			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800069a:	484e      	ldr	r0, [pc, #312]	; (80007d4 <StartDefaultTask+0x32c>)
 800069c:	f000 feb8 	bl	8001410 <HAL_GPIO_WritePin>
		  			  /*Turn Off the red LED of floor 1,2,3*/
		  			  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2140      	movs	r1, #64	; 0x40
 80006a4:	484c      	ldr	r0, [pc, #304]	; (80007d8 <StartDefaultTask+0x330>)
 80006a6:	f000 feb3 	bl	8001410 <HAL_GPIO_WritePin>
		  			  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2110      	movs	r1, #16
 80006ae:	484b      	ldr	r0, [pc, #300]	; (80007dc <StartDefaultTask+0x334>)
 80006b0:	f000 feae 	bl	8001410 <HAL_GPIO_WritePin>
		  			  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2110      	movs	r1, #16
 80006b8:	4847      	ldr	r0, [pc, #284]	; (80007d8 <StartDefaultTask+0x330>)
 80006ba:	f000 fea9 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ElevatorState=moving;
 80006be:	4b48      	ldr	r3, [pc, #288]	; (80007e0 <StartDefaultTask+0x338>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	701a      	strb	r2, [r3, #0]
		  			  HAL_Delay(4000);
 80006c4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80006c8:	f000 fbfc 	bl	8000ec4 <HAL_Delay>
		  			  //turn on the red led of floor1
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2140      	movs	r1, #64	; 0x40
 80006d0:	4841      	ldr	r0, [pc, #260]	; (80007d8 <StartDefaultTask+0x330>)
 80006d2:	f000 fe9d 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ////BUZZER//////
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2101      	movs	r1, #1
 80006da:	4840      	ldr	r0, [pc, #256]	; (80007dc <StartDefaultTask+0x334>)
 80006dc:	f000 fe98 	bl	8001410 <HAL_GPIO_WritePin>
		  					  HAL_Delay(500);
 80006e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e4:	f000 fbee 	bl	8000ec4 <HAL_Delay>
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	483b      	ldr	r0, [pc, #236]	; (80007dc <StartDefaultTask+0x334>)
 80006ee:	f000 fe8f 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ////////////////
		  			  //turn off the blue led if floor1
		  			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006f8:	4836      	ldr	r0, [pc, #216]	; (80007d4 <StartDefaultTask+0x32c>)
 80006fa:	f000 fe89 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ElevatorState=floor1;
 80006fe:	4b38      	ldr	r3, [pc, #224]	; (80007e0 <StartDefaultTask+0x338>)
 8000700:	2201      	movs	r2, #1
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e061      	b.n	80007ca <StartDefaultTask+0x322>
		  		  }
		  		  else if((commands==floor3_Button)||(commands==elevator_toFloor3_Btn)){
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	2b04      	cmp	r3, #4
 800070a:	d002      	beq.n	8000712 <StartDefaultTask+0x26a>
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	2b07      	cmp	r3, #7
 8000710:	d15b      	bne.n	80007ca <StartDefaultTask+0x322>
		  			  //turn on the blue led of floor3
		  			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000718:	482e      	ldr	r0, [pc, #184]	; (80007d4 <StartDefaultTask+0x32c>)
 800071a:	f000 fe79 	bl	8001410 <HAL_GPIO_WritePin>
		  			  /*Turn Off the red LED of floor 1,2,3*/
		  				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	2140      	movs	r1, #64	; 0x40
 8000722:	482d      	ldr	r0, [pc, #180]	; (80007d8 <StartDefaultTask+0x330>)
 8000724:	f000 fe74 	bl	8001410 <HAL_GPIO_WritePin>
		  				  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2110      	movs	r1, #16
 800072c:	482b      	ldr	r0, [pc, #172]	; (80007dc <StartDefaultTask+0x334>)
 800072e:	f000 fe6f 	bl	8001410 <HAL_GPIO_WritePin>
		  				  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	2110      	movs	r1, #16
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <StartDefaultTask+0x330>)
 8000738:	f000 fe6a 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ElevatorState=moving;
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <StartDefaultTask+0x338>)
 800073e:	2204      	movs	r2, #4
 8000740:	701a      	strb	r2, [r3, #0]
		  			  HAL_Delay(4000);
 8000742:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000746:	f000 fbbd 	bl	8000ec4 <HAL_Delay>
		  			  /*Turn on the blue LED**/
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2110      	movs	r1, #16
 800074e:	4822      	ldr	r0, [pc, #136]	; (80007d8 <StartDefaultTask+0x330>)
 8000750:	f000 fe5e 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ////BUZZER//////
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000754:	2201      	movs	r2, #1
 8000756:	2101      	movs	r1, #1
 8000758:	4820      	ldr	r0, [pc, #128]	; (80007dc <StartDefaultTask+0x334>)
 800075a:	f000 fe59 	bl	8001410 <HAL_GPIO_WritePin>
		  					  HAL_Delay(500);
 800075e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000762:	f000 fbaf 	bl	8000ec4 <HAL_Delay>
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2101      	movs	r1, #1
 800076a:	481c      	ldr	r0, [pc, #112]	; (80007dc <StartDefaultTask+0x334>)
 800076c:	f000 fe50 	bl	8001410 <HAL_GPIO_WritePin>
		  					  HAL_Delay(500);
 8000770:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000774:	f000 fba6 	bl	8000ec4 <HAL_Delay>
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2101      	movs	r1, #1
 800077c:	4817      	ldr	r0, [pc, #92]	; (80007dc <StartDefaultTask+0x334>)
 800077e:	f000 fe47 	bl	8001410 <HAL_GPIO_WritePin>
		  					  HAL_Delay(500);
 8000782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000786:	f000 fb9d 	bl	8000ec4 <HAL_Delay>
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2101      	movs	r1, #1
 800078e:	4813      	ldr	r0, [pc, #76]	; (80007dc <StartDefaultTask+0x334>)
 8000790:	f000 fe3e 	bl	8001410 <HAL_GPIO_WritePin>
		  					  HAL_Delay(500);
 8000794:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000798:	f000 fb94 	bl	8000ec4 <HAL_Delay>
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2101      	movs	r1, #1
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <StartDefaultTask+0x334>)
 80007a2:	f000 fe35 	bl	8001410 <HAL_GPIO_WritePin>
		  					  HAL_Delay(500);
 80007a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007aa:	f000 fb8b 	bl	8000ec4 <HAL_Delay>
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2101      	movs	r1, #1
 80007b2:	480a      	ldr	r0, [pc, #40]	; (80007dc <StartDefaultTask+0x334>)
 80007b4:	f000 fe2c 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ////////////////
		  			  /*Turn off the blue LED**/
		  			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_10,GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <StartDefaultTask+0x32c>)
 80007c0:	f000 fe26 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ElevatorState=floor3;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <StartDefaultTask+0x338>)
 80007c6:	2203      	movs	r2, #3
 80007c8:	701a      	strb	r2, [r3, #0]
		  		  }
		  /*Wait for 3 seconds to get elevator empty*/
		  HAL_Delay(3000);
 80007ca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80007ce:	f000 fb79 	bl	8000ec4 <HAL_Delay>
 80007d2:	e0a1      	b.n	8000918 <StartDefaultTask+0x470>
 80007d4:	40020c00 	.word	0x40020c00
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40020800 	.word	0x40020800
 80007e0:	20000000 	.word	0x20000000
	  }
	  else // The elevator is in floor 3
	  {
		  /*Turn On LED of the floor 3*/
		  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2110      	movs	r1, #16
 80007e8:	4851      	ldr	r0, [pc, #324]	; (8000930 <StartDefaultTask+0x488>)
 80007ea:	f000 fe11 	bl	8001410 <HAL_GPIO_WritePin>

		  if(commands==floor1_Button ||(commands==elevator_toFloor1_Btn)){
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d002      	beq.n	80007fa <StartDefaultTask+0x352>
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	2b05      	cmp	r3, #5
 80007f8:	d137      	bne.n	800086a <StartDefaultTask+0x3c2>
		  			  //turn on the blue led if floor1
		  			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000800:	484c      	ldr	r0, [pc, #304]	; (8000934 <StartDefaultTask+0x48c>)
 8000802:	f000 fe05 	bl	8001410 <HAL_GPIO_WritePin>
		  			  /*Turn Off the red LED of floor 1,2,3*/
		  			  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4849      	ldr	r0, [pc, #292]	; (8000930 <StartDefaultTask+0x488>)
 800080c:	f000 fe00 	bl	8001410 <HAL_GPIO_WritePin>
		  			  	  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	2110      	movs	r1, #16
 8000814:	4848      	ldr	r0, [pc, #288]	; (8000938 <StartDefaultTask+0x490>)
 8000816:	f000 fdfb 	bl	8001410 <HAL_GPIO_WritePin>
		  			  	  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2110      	movs	r1, #16
 800081e:	4844      	ldr	r0, [pc, #272]	; (8000930 <StartDefaultTask+0x488>)
 8000820:	f000 fdf6 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ElevatorState=moving;
 8000824:	4b45      	ldr	r3, [pc, #276]	; (800093c <StartDefaultTask+0x494>)
 8000826:	2204      	movs	r2, #4
 8000828:	701a      	strb	r2, [r3, #0]
		  			  HAL_Delay(6000);
 800082a:	f241 7070 	movw	r0, #6000	; 0x1770
 800082e:	f000 fb49 	bl	8000ec4 <HAL_Delay>
		  			  //turn on the red led of floor1
		  			  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2140      	movs	r1, #64	; 0x40
 8000836:	483e      	ldr	r0, [pc, #248]	; (8000930 <StartDefaultTask+0x488>)
 8000838:	f000 fdea 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ////BUZZER//////
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	483d      	ldr	r0, [pc, #244]	; (8000938 <StartDefaultTask+0x490>)
 8000842:	f000 fde5 	bl	8001410 <HAL_GPIO_WritePin>
		  					  HAL_Delay(500);
 8000846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084a:	f000 fb3b 	bl	8000ec4 <HAL_Delay>
		  					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 800084e:	2200      	movs	r2, #0
 8000850:	2101      	movs	r1, #1
 8000852:	4839      	ldr	r0, [pc, #228]	; (8000938 <StartDefaultTask+0x490>)
 8000854:	f000 fddc 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ////////////////
		  			  //turn off the blue led if floor1
		  			  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 8000858:	2200      	movs	r2, #0
 800085a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085e:	4835      	ldr	r0, [pc, #212]	; (8000934 <StartDefaultTask+0x48c>)
 8000860:	f000 fdd6 	bl	8001410 <HAL_GPIO_WritePin>
		  			  ElevatorState=floor1;
 8000864:	4b35      	ldr	r3, [pc, #212]	; (800093c <StartDefaultTask+0x494>)
 8000866:	2201      	movs	r2, #1
 8000868:	701a      	strb	r2, [r3, #0]
		  		  }
			  if(commands==floor2_down_Button ||commands==floor2_up_Button ||(commands==elevator_toFloor2_Btn)){
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d005      	beq.n	800087c <StartDefaultTask+0x3d4>
 8000870:	7bfb      	ldrb	r3, [r7, #15]
 8000872:	2b03      	cmp	r3, #3
 8000874:	d002      	beq.n	800087c <StartDefaultTask+0x3d4>
 8000876:	7bfb      	ldrb	r3, [r7, #15]
 8000878:	2b06      	cmp	r3, #6
 800087a:	d149      	bne.n	8000910 <StartDefaultTask+0x468>
				  //turn on the blue led if floor2
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000882:	482c      	ldr	r0, [pc, #176]	; (8000934 <StartDefaultTask+0x48c>)
 8000884:	f000 fdc4 	bl	8001410 <HAL_GPIO_WritePin>
				  /*Turn Off the red LED of floor 1,2,3*/
					  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_6,GPIO_PIN_RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	2140      	movs	r1, #64	; 0x40
 800088c:	4828      	ldr	r0, [pc, #160]	; (8000930 <StartDefaultTask+0x488>)
 800088e:	f000 fdbf 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2110      	movs	r1, #16
 8000896:	4828      	ldr	r0, [pc, #160]	; (8000938 <StartDefaultTask+0x490>)
 8000898:	f000 fdba 	bl	8001410 <HAL_GPIO_WritePin>
					  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2110      	movs	r1, #16
 80008a0:	4823      	ldr	r0, [pc, #140]	; (8000930 <StartDefaultTask+0x488>)
 80008a2:	f000 fdb5 	bl	8001410 <HAL_GPIO_WritePin>
				  ElevatorState=moving;
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <StartDefaultTask+0x494>)
 80008a8:	2204      	movs	r2, #4
 80008aa:	701a      	strb	r2, [r3, #0]
				  HAL_Delay(4000);
 80008ac:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008b0:	f000 fb08 	bl	8000ec4 <HAL_Delay>
				  //turn on the red led of floor2
				  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,GPIO_PIN_SET);
 80008b4:	2201      	movs	r2, #1
 80008b6:	2110      	movs	r1, #16
 80008b8:	481f      	ldr	r0, [pc, #124]	; (8000938 <StartDefaultTask+0x490>)
 80008ba:	f000 fda9 	bl	8001410 <HAL_GPIO_WritePin>
				  ////BUZZER//////
						  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80008be:	2201      	movs	r2, #1
 80008c0:	2101      	movs	r1, #1
 80008c2:	481d      	ldr	r0, [pc, #116]	; (8000938 <StartDefaultTask+0x490>)
 80008c4:	f000 fda4 	bl	8001410 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80008c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008cc:	f000 fafa 	bl	8000ec4 <HAL_Delay>
						  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2101      	movs	r1, #1
 80008d4:	4818      	ldr	r0, [pc, #96]	; (8000938 <StartDefaultTask+0x490>)
 80008d6:	f000 fd9b 	bl	8001410 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80008da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008de:	f000 faf1 	bl	8000ec4 <HAL_Delay>
						  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2101      	movs	r1, #1
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <StartDefaultTask+0x490>)
 80008e8:	f000 fd92 	bl	8001410 <HAL_GPIO_WritePin>
						  HAL_Delay(500);
 80008ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008f0:	f000 fae8 	bl	8000ec4 <HAL_Delay>
						  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2101      	movs	r1, #1
 80008f8:	480f      	ldr	r0, [pc, #60]	; (8000938 <StartDefaultTask+0x490>)
 80008fa:	f000 fd89 	bl	8001410 <HAL_GPIO_WritePin>
				  ////////////////
				  //turn off the blue led if floor2
				  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_12,GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <StartDefaultTask+0x48c>)
 8000906:	f000 fd83 	bl	8001410 <HAL_GPIO_WritePin>
				  ElevatorState=floor2;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <StartDefaultTask+0x494>)
 800090c:	2202      	movs	r2, #2
 800090e:	701a      	strb	r2, [r3, #0]
			  }

			  /*Wait for 3 seconds to get elevator empty*/
			  HAL_Delay(3000);
 8000910:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000914:	f000 fad6 	bl	8000ec4 <HAL_Delay>
	  }
	  xQueueReceive( xElevatorQueue,&(commandNumber), portMAX_DELAY );
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <StartDefaultTask+0x498>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f107 0108 	add.w	r1, r7, #8
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	4618      	mov	r0, r3
 8000926:	f002 ff29 	bl	800377c <xQueueReceive>
	  commands=commandNumber;
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	73fb      	strb	r3, [r7, #15]
	  if(ElevatorState==floor1)
 800092e:	e5dc      	b.n	80004ea <StartDefaultTask+0x42>
 8000930:	40020000 	.word	0x40020000
 8000934:	40020c00 	.word	0x40020c00
 8000938:	40020800 	.word	0x40020800
 800093c:	20000000 	.word	0x20000000
 8000940:	20000298 	.word	0x20000298

08000944 <prvUserButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void prvUserButtonTask(void const * argument)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
	  configure_Commands_Button(); // call Push button GPIO pins initialization function
 800094c:	f000 f904 	bl	8000b58 <configure_Commands_Button>
	  Init_OnBoard_LEDs();
 8000950:	f000 f8b6 	bl	8000ac0 <Init_OnBoard_LEDs>
  /* USER CODE BEGIN 5 */
   uint8_t userKeyState = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	73bb      	strb	r3, [r7, #14]
   uint8_t userbutton=0;
 8000958:	2300      	movs	r3, #0
 800095a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {

	  state = Read_User_Button(GPIOE, GPIO_PIN_10); // read state of push button and save it in "state" variable
 800095c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000960:	484e      	ldr	r0, [pc, #312]	; (8000a9c <prvUserButtonTask+0x158>)
 8000962:	f000 f973 	bl	8000c4c <Read_User_Button>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	4b4d      	ldr	r3, [pc, #308]	; (8000aa0 <prvUserButtonTask+0x15c>)
 800096c:	701a      	strb	r2, [r3, #0]
	  if(state==1){
 800096e:	4b4c      	ldr	r3, [pc, #304]	; (8000aa0 <prvUserButtonTask+0x15c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d109      	bne.n	800098a <prvUserButtonTask+0x46>
		  userKeyState=floor3_Button;
 8000976:	2304      	movs	r3, #4
 8000978:	73bb      	strb	r3, [r7, #14]
		  xQueueSend( xElevatorQueue,&userKeyState,( TickType_t ) 10 );/*The elevator is request from the floor 3 to go down*/
 800097a:	4b4a      	ldr	r3, [pc, #296]	; (8000aa4 <prvUserButtonTask+0x160>)
 800097c:	6818      	ldr	r0, [r3, #0]
 800097e:	f107 010e 	add.w	r1, r7, #14
 8000982:	2300      	movs	r3, #0
 8000984:	220a      	movs	r2, #10
 8000986:	f002 fd5f 	bl	8003448 <xQueueGenericSend>
		  //UserButtonState_PE10=1;// Floor3
	  }

	  state = Read_User_Button(GPIOE, GPIO_PIN_8); // read state of push button and save it in "state" variable
 800098a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098e:	4843      	ldr	r0, [pc, #268]	; (8000a9c <prvUserButtonTask+0x158>)
 8000990:	f000 f95c 	bl	8000c4c <Read_User_Button>
 8000994:	4603      	mov	r3, r0
 8000996:	461a      	mov	r2, r3
 8000998:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <prvUserButtonTask+0x15c>)
 800099a:	701a      	strb	r2, [r3, #0]
	  if(state==1){
 800099c:	4b40      	ldr	r3, [pc, #256]	; (8000aa0 <prvUserButtonTask+0x15c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d109      	bne.n	80009b8 <prvUserButtonTask+0x74>
		  userKeyState=floor2_up_Button;
 80009a4:	2303      	movs	r3, #3
 80009a6:	73bb      	strb	r3, [r7, #14]
		  xQueueSend( xElevatorQueue,&userKeyState,( TickType_t ) 10 );/*The elevator is request from the floor 2 to go up*/
 80009a8:	4b3e      	ldr	r3, [pc, #248]	; (8000aa4 <prvUserButtonTask+0x160>)
 80009aa:	6818      	ldr	r0, [r3, #0]
 80009ac:	f107 010e 	add.w	r1, r7, #14
 80009b0:	2300      	movs	r3, #0
 80009b2:	220a      	movs	r2, #10
 80009b4:	f002 fd48 	bl	8003448 <xQueueGenericSend>
		 // UserButtonState_PE8=1;// Floor2
	  }

	  state = Read_User_Button(GPIOE, GPIO_PIN_12); // read state of push button and save it in "state" variable
 80009b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009bc:	4837      	ldr	r0, [pc, #220]	; (8000a9c <prvUserButtonTask+0x158>)
 80009be:	f000 f945 	bl	8000c4c <Read_User_Button>
 80009c2:	4603      	mov	r3, r0
 80009c4:	461a      	mov	r2, r3
 80009c6:	4b36      	ldr	r3, [pc, #216]	; (8000aa0 <prvUserButtonTask+0x15c>)
 80009c8:	701a      	strb	r2, [r3, #0]
	  if(state==1){
 80009ca:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <prvUserButtonTask+0x15c>)
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d109      	bne.n	80009e6 <prvUserButtonTask+0xa2>
		  userKeyState=floor2_down_Button;
 80009d2:	2302      	movs	r3, #2
 80009d4:	73bb      	strb	r3, [r7, #14]
		  xQueueSend( xElevatorQueue,&userKeyState,( TickType_t ) 10 );/*The elevator is request from the floor 2 to go dpwn*/
 80009d6:	4b33      	ldr	r3, [pc, #204]	; (8000aa4 <prvUserButtonTask+0x160>)
 80009d8:	6818      	ldr	r0, [r3, #0]
 80009da:	f107 010e 	add.w	r1, r7, #14
 80009de:	2300      	movs	r3, #0
 80009e0:	220a      	movs	r2, #10
 80009e2:	f002 fd31 	bl	8003448 <xQueueGenericSend>
		  //UserButtonState_PB2=1;// Floor1
	  }

	  state = Read_User_Button(GPIOB, GPIO_PIN_0); // read state of push button and save it in "state" variable
 80009e6:	2101      	movs	r1, #1
 80009e8:	482f      	ldr	r0, [pc, #188]	; (8000aa8 <prvUserButtonTask+0x164>)
 80009ea:	f000 f92f 	bl	8000c4c <Read_User_Button>
 80009ee:	4603      	mov	r3, r0
 80009f0:	461a      	mov	r2, r3
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <prvUserButtonTask+0x15c>)
 80009f4:	701a      	strb	r2, [r3, #0]
	  if(state==1){
 80009f6:	4b2a      	ldr	r3, [pc, #168]	; (8000aa0 <prvUserButtonTask+0x15c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d109      	bne.n	8000a12 <prvUserButtonTask+0xce>
		  userKeyState=floor1_Button;
 80009fe:	2301      	movs	r3, #1
 8000a00:	73bb      	strb	r3, [r7, #14]
		  xQueueSend( xElevatorQueue,&userKeyState,( TickType_t ) 10 );/*The elevator is request from the floor 1*/
 8000a02:	4b28      	ldr	r3, [pc, #160]	; (8000aa4 <prvUserButtonTask+0x160>)
 8000a04:	6818      	ldr	r0, [r3, #0]
 8000a06:	f107 010e 	add.w	r1, r7, #14
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	220a      	movs	r2, #10
 8000a0e:	f002 fd1b 	bl	8003448 <xQueueGenericSend>
		  // UserButtonState_PB0=1;// Floor1
	  }


	  state = Read_User_Button(GPIOA, GPIO_PIN_2); // read state of push button and save it in "state" variable
 8000a12:	2104      	movs	r1, #4
 8000a14:	4825      	ldr	r0, [pc, #148]	; (8000aac <prvUserButtonTask+0x168>)
 8000a16:	f000 f919 	bl	8000c4c <Read_User_Button>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b20      	ldr	r3, [pc, #128]	; (8000aa0 <prvUserButtonTask+0x15c>)
 8000a20:	701a      	strb	r2, [r3, #0]
	  if(state==1){
 8000a22:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <prvUserButtonTask+0x15c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d109      	bne.n	8000a3e <prvUserButtonTask+0xfa>
		  userKeyState=elevator_toFloor3_Btn;
 8000a2a:	2307      	movs	r3, #7
 8000a2c:	73bb      	strb	r3, [r7, #14]
		  xQueueSend( xElevatorQueue,&userKeyState,( TickType_t ) 10 );/*The elevator is commanded to go to the floor3*/
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <prvUserButtonTask+0x160>)
 8000a30:	6818      	ldr	r0, [r3, #0]
 8000a32:	f107 010e 	add.w	r1, r7, #14
 8000a36:	2300      	movs	r3, #0
 8000a38:	220a      	movs	r2, #10
 8000a3a:	f002 fd05 	bl	8003448 <xQueueGenericSend>
		  //UserButtonState_PA2=1;// Elevator to floor3
	  }


	  state = Read_User_Button(GPIOA, GPIO_PIN_0); // read state of push button and save it in "state" variable
 8000a3e:	2101      	movs	r1, #1
 8000a40:	481a      	ldr	r0, [pc, #104]	; (8000aac <prvUserButtonTask+0x168>)
 8000a42:	f000 f903 	bl	8000c4c <Read_User_Button>
 8000a46:	4603      	mov	r3, r0
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b15      	ldr	r3, [pc, #84]	; (8000aa0 <prvUserButtonTask+0x15c>)
 8000a4c:	701a      	strb	r2, [r3, #0]
	  if(state==1){
 8000a4e:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <prvUserButtonTask+0x15c>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d109      	bne.n	8000a6a <prvUserButtonTask+0x126>
		  userKeyState=elevator_toFloor2_Btn;
 8000a56:	2306      	movs	r3, #6
 8000a58:	73bb      	strb	r3, [r7, #14]
		  xQueueSend( xElevatorQueue,&userKeyState,( TickType_t ) 10 );/*The elevator is commanded to go to the floor2*/
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <prvUserButtonTask+0x160>)
 8000a5c:	6818      	ldr	r0, [r3, #0]
 8000a5e:	f107 010e 	add.w	r1, r7, #14
 8000a62:	2300      	movs	r3, #0
 8000a64:	220a      	movs	r2, #10
 8000a66:	f002 fcef 	bl	8003448 <xQueueGenericSend>
		 //UserButtonState_PA0=1;// Elevator to floor2

	  }

	  state = Read_User_Button(GPIOC, GPIO_PIN_2); // read state of push button and save it in "state" variable
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	4810      	ldr	r0, [pc, #64]	; (8000ab0 <prvUserButtonTask+0x16c>)
 8000a6e:	f000 f8ed 	bl	8000c4c <Read_User_Button>
 8000a72:	4603      	mov	r3, r0
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <prvUserButtonTask+0x15c>)
 8000a78:	701a      	strb	r2, [r3, #0]
	  if(state==1){
 8000a7a:	4b09      	ldr	r3, [pc, #36]	; (8000aa0 <prvUserButtonTask+0x15c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	f47f af6c 	bne.w	800095c <prvUserButtonTask+0x18>
		  userKeyState=elevator_toFloor1_Btn;
 8000a84:	2305      	movs	r3, #5
 8000a86:	73bb      	strb	r3, [r7, #14]
		  xQueueSend( xElevatorQueue,&userKeyState,( TickType_t ) 10 );/*The elevator is commanded to go to the floor1*/
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <prvUserButtonTask+0x160>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	f107 010e 	add.w	r1, r7, #14
 8000a90:	2300      	movs	r3, #0
 8000a92:	220a      	movs	r2, #10
 8000a94:	f002 fcd8 	bl	8003448 <xQueueGenericSend>
	  state = Read_User_Button(GPIOE, GPIO_PIN_10); // read state of push button and save it in "state" variable
 8000a98:	e760      	b.n	800095c <prvUserButtonTask+0x18>
 8000a9a:	bf00      	nop
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	20000294 	.word	0x20000294
 8000aa4:	20000298 	.word	0x20000298
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020800 	.word	0x40020800

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <Init_OnBoard_LEDs>:
  /* USER CODE END Error_Handler_Debug */
}


void Init_OnBoard_LEDs(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b092      	sub	sp, #72	; 0x48
 8000ac4:	af00      	add	r7, sp, #0
	 __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <Init_OnBoard_LEDs+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <Init_OnBoard_LEDs+0x88>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <Init_OnBoard_LEDs+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <Init_OnBoard_LEDs+0x88>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <Init_OnBoard_LEDs+0x88>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <Init_OnBoard_LEDs+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
	GPIO_InitTypeDef BoardLEDs, USB_RED_LED, BoardLEDPC;

	BoardLEDs.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	63bb      	str	r3, [r7, #56]	; 0x38
	USB_RED_LED.Mode = GPIO_MODE_OUTPUT_PP;
 8000b02:	2301      	movs	r3, #1
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
	BoardLEDPC.Mode = GPIO_MODE_OUTPUT_PP;
 8000b06:	2301      	movs	r3, #1
 8000b08:	613b      	str	r3, [r7, #16]

	BoardLEDs.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_6;
 8000b0a:	f24f 4350 	movw	r3, #62544	; 0xf450
 8000b0e:	637b      	str	r3, [r7, #52]	; 0x34
	BoardLEDPC.Pin = GPIO_PIN_4|GPIO_PIN_0;
 8000b10:	2311      	movs	r3, #17
 8000b12:	60fb      	str	r3, [r7, #12]
	USB_RED_LED.Pin = GPIO_PIN_9|GPIO_PIN_4|GPIO_PIN_6;
 8000b14:	f44f 7314 	mov.w	r3, #592	; 0x250
 8000b18:	623b      	str	r3, [r7, #32]

	HAL_GPIO_Init(GPIOD, &BoardLEDs);
 8000b1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480a      	ldr	r0, [pc, #40]	; (8000b4c <Init_OnBoard_LEDs+0x8c>)
 8000b22:	f000 fad9 	bl	80010d8 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOA, &USB_RED_LED);
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <Init_OnBoard_LEDs+0x90>)
 8000b2e:	f000 fad3 	bl	80010d8 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &BoardLEDPC);
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	4619      	mov	r1, r3
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <Init_OnBoard_LEDs+0x94>)
 8000b3a:	f000 facd 	bl	80010d8 <HAL_GPIO_Init>
}
 8000b3e:	bf00      	nop
 8000b40:	3748      	adds	r7, #72	; 0x48
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	40020c00 	.word	0x40020c00
 8000b50:	40020000 	.word	0x40020000
 8000b54:	40020800 	.word	0x40020800

08000b58 <configure_Commands_Button>:
	PushButton.Pull = GPIO_NOPULL; // set no internal pull-up or pull-down resistor
	HAL_GPIO_Init(GPIOA, &PushButton); //  initialize PA0 pins by passing port name and address of PushButton struct
}

void configure_Commands_Button(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b098      	sub	sp, #96	; 0x60
 8000b5c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOE_CLK_ENABLE(); //Enable clock to GPIOE
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a34      	ldr	r2, [pc, #208]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000b68:	f043 0310 	orr.w	r3, r3, #16
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0310 	and.w	r3, r3, #16
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE(); //Enable clock to GPIOB
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a2d      	ldr	r2, [pc, #180]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000b84:	f043 0302 	orr.w	r3, r3, #2
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0302 	and.w	r3, r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE(); //Enable clock to GPIOA
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b27      	ldr	r3, [pc, #156]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a26      	ldr	r2, [pc, #152]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b24      	ldr	r3, [pc, #144]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE(); //Enable clock to GPIOC
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a1f      	ldr	r2, [pc, #124]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b1d      	ldr	r3, [pc, #116]	; (8000c38 <configure_Commands_Button+0xe0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

	/*Button to go up in floor 2 and button to go down in floor3*/
	GPIO_InitTypeDef PushButtonE;  // declare a variable of type struct GPIO_InitTypeDef
	PushButtonE.Mode = GPIO_MODE_INPUT; // set pin mode to input
 8000bce:	2300      	movs	r3, #0
 8000bd0:	653b      	str	r3, [r7, #80]	; 0x50
	PushButtonE.Pin = GPIO_PIN_10|GPIO_PIN_8||GPIO_PIN_12;  // select pin PE10 only
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
	PushButtonE.Pull = GPIO_NOPULL; // set no internal pull-up
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	657b      	str	r3, [r7, #84]	; 0x54
	HAL_GPIO_Init(GPIOE, &PushButtonE); //  initialize PE10 pins by passing port name and address of PushButton struct
 8000bda:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bde:	4619      	mov	r1, r3
 8000be0:	4816      	ldr	r0, [pc, #88]	; (8000c3c <configure_Commands_Button+0xe4>)
 8000be2:	f000 fa79 	bl	80010d8 <HAL_GPIO_Init>

	/*Button to go down in floor 2*/
	GPIO_InitTypeDef PushButtonB;  // declare a variable of type struct GPIO_InitTypeDef
	PushButtonB.Mode = GPIO_MODE_INPUT; // set pin mode to input
 8000be6:	2300      	movs	r3, #0
 8000be8:	63fb      	str	r3, [r7, #60]	; 0x3c
	PushButtonB.Pin =  GPIO_PIN_2|GPIO_PIN_0;  // select pin PB0 and PB2
 8000bea:	2305      	movs	r3, #5
 8000bec:	63bb      	str	r3, [r7, #56]	; 0x38
	PushButtonB.Pull = GPIO_NOPULL; // set no internal pull-up
 8000bee:	2300      	movs	r3, #0
 8000bf0:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOB, &PushButtonB); //  initialize PE10 pins by passing port name and address of PushButton struct
 8000bf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <configure_Commands_Button+0xe8>)
 8000bfa:	f000 fa6d 	bl	80010d8 <HAL_GPIO_Init>

	/*Button to choose the floor from the elevator floor2 and 3r*/
	GPIO_InitTypeDef PushButtonA;  // declare a variable of type struct GPIO_InitTypeDef
	PushButtonA.Mode = GPIO_MODE_INPUT; // set pin mode to input
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
	PushButtonA.Pin =  GPIO_PIN_2|GPIO_PIN_0;  // select pin PB0 and PB2
 8000c02:	2305      	movs	r3, #5
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
	PushButtonA.Pull = GPIO_NOPULL; // set no internal pull-up
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &PushButtonA); //  initialize PE10 pins by passing port name and address of PushButton struct
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <configure_Commands_Button+0xec>)
 8000c12:	f000 fa61 	bl	80010d8 <HAL_GPIO_Init>

	/*Button to choose the floor 1 from the elevator*/
	GPIO_InitTypeDef PushButtonC;  // declare a variable of type struct GPIO_InitTypeDef
	PushButtonC.Mode = GPIO_MODE_INPUT; // set pin mode to input
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
	PushButtonC.Pin =  GPIO_PIN_2;  // select pin PB0 and PB2
 8000c1a:	2304      	movs	r3, #4
 8000c1c:	613b      	str	r3, [r7, #16]
	PushButtonC.Pull = GPIO_NOPULL; // set no internal pull-up
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &PushButtonC); //  initialize PE10 pins by passing port name and address of PushButton struct
 8000c22:	f107 0310 	add.w	r3, r7, #16
 8000c26:	4619      	mov	r1, r3
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <configure_Commands_Button+0xf0>)
 8000c2a:	f000 fa55 	bl	80010d8 <HAL_GPIO_Init>
}
 8000c2e:	bf00      	nop
 8000c30:	3760      	adds	r7, #96	; 0x60
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40020400 	.word	0x40020400
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020800 	.word	0x40020800

08000c4c <Read_User_Button>:

uint8_t Read_User_Button(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	807b      	strh	r3, [r7, #2]
	uint32_t tick,ElapsedTime;//
	if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 fbbf 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d01f      	beq.n	8000ca8 <Read_User_Button+0x5c>
	{
		 tick=HAL_GetTick();
 8000c68:	f000 f920 	bl	8000eac <HAL_GetTick>
 8000c6c:	60f8      	str	r0, [r7, #12]
		 while((HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)==GPIO_PIN_SET) && (HAL_GetTick()-tick<=200));
 8000c6e:	bf00      	nop
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	4619      	mov	r1, r3
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f000 fbb3 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d106      	bne.n	8000c8e <Read_User_Button+0x42>
 8000c80:	f000 f914 	bl	8000eac <HAL_GetTick>
 8000c84:	4602      	mov	r2, r0
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	2bc8      	cmp	r3, #200	; 0xc8
 8000c8c:	d9f0      	bls.n	8000c70 <Read_User_Button+0x24>
		 ElapsedTime=HAL_GetTick()-tick;
 8000c8e:	f000 f90d 	bl	8000eac <HAL_GetTick>
 8000c92:	4602      	mov	r2, r0
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	60bb      	str	r3, [r7, #8]
		 if(ElapsedTime>100)
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b64      	cmp	r3, #100	; 0x64
 8000c9e:	d901      	bls.n	8000ca4 <Read_User_Button+0x58>
			 return 1;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e002      	b.n	8000caa <Read_User_Button+0x5e>
		 else
			 return 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e000      	b.n	8000caa <Read_User_Button+0x5e>

	}
	else
		return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_MspInit+0x54>)
 8000cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc2:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <HAL_MspInit+0x54>)
 8000cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <HAL_MspInit+0x54>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_MspInit+0x54>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <HAL_MspInit+0x54>)
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_MspInit+0x54>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	210f      	movs	r1, #15
 8000cf6:	f06f 0001 	mvn.w	r0, #1
 8000cfa:	f000 f9c4 	bl	8001086 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 f8a2 	bl	8000e84 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d40:	f003 fc9e 	bl	8004680 <xTaskGetSchedulerState>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d001      	beq.n	8000d4e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d4a:	f003 ff65 	bl	8004c18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <OTG_FS_IRQHandler+0x10>)
 8000d5a:	f000 fb72 	bl	8001442 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20003ff4 	.word	0x20003ff4

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480d      	ldr	r0, [pc, #52]	; (8000dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d92:	490e      	ldr	r1, [pc, #56]	; (8000dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d94:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000da8:	4c0b      	ldr	r4, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ffd7 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f004 fa47 	bl	800524c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fa29 	bl	8000214 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000dd0:	08005330 	.word	0x08005330
  ldr r2, =_sbss
 8000dd4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000dd8:	200042f8 	.word	0x200042f8

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f931 	bl	8001070 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	200f      	movs	r0, #15
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff ff4e 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f93b 	bl	80010be <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f911 	bl	8001086 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000004 	.word	0x20000004
 8000e7c:	2000000c 	.word	0x2000000c
 8000e80:	20000008 	.word	0x20000008

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	2000029c 	.word	0x2000029c

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000029c 	.word	0x2000029c

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000000c 	.word	0x2000000c

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3b01      	subs	r3, #1
 8001038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800103c:	d301      	bcc.n	8001042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103e:	2301      	movs	r3, #1
 8001040:	e00f      	b.n	8001062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <SysTick_Config+0x40>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800104a:	210f      	movs	r1, #15
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f7ff ff8e 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <SysTick_Config+0x40>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105a:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Config+0x40>)
 800105c:	2207      	movs	r2, #7
 800105e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	e000e010 	.word	0xe000e010

08001070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ff47 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001086:	b580      	push	{r7, lr}
 8001088:	b086      	sub	sp, #24
 800108a:	af00      	add	r7, sp, #0
 800108c:	4603      	mov	r3, r0
 800108e:	60b9      	str	r1, [r7, #8]
 8001090:	607a      	str	r2, [r7, #4]
 8001092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001098:	f7ff ff5c 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 800109c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	68b9      	ldr	r1, [r7, #8]
 80010a2:	6978      	ldr	r0, [r7, #20]
 80010a4:	f7ff ff8e 	bl	8000fc4 <NVIC_EncodePriority>
 80010a8:	4602      	mov	r2, r0
 80010aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff5d 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffb0 	bl	800102c <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b089      	sub	sp, #36	; 0x24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
 80010f2:	e159      	b.n	80013a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	429a      	cmp	r2, r3
 800110e:	f040 8148 	bne.w	80013a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d005      	beq.n	800112a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001126:	2b02      	cmp	r3, #2
 8001128:	d130      	bne.n	800118c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	2203      	movs	r2, #3
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	68da      	ldr	r2, [r3, #12]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001160:	2201      	movs	r2, #1
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	091b      	lsrs	r3, r3, #4
 8001176:	f003 0201 	and.w	r2, r3, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f003 0303 	and.w	r3, r3, #3
 8001194:	2b03      	cmp	r3, #3
 8001196:	d017      	beq.n	80011c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	2203      	movs	r2, #3
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4013      	ands	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d123      	bne.n	800121c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	08da      	lsrs	r2, r3, #3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3208      	adds	r2, #8
 80011dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	220f      	movs	r2, #15
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691a      	ldr	r2, [r3, #16]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	08da      	lsrs	r2, r3, #3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3208      	adds	r2, #8
 8001216:	69b9      	ldr	r1, [r7, #24]
 8001218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 0203 	and.w	r2, r3, #3
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 80a2 	beq.w	80013a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b57      	ldr	r3, [pc, #348]	; (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	4a56      	ldr	r2, [pc, #344]	; (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126c:	6453      	str	r3, [r2, #68]	; 0x44
 800126e:	4b54      	ldr	r3, [pc, #336]	; (80013c0 <HAL_GPIO_Init+0x2e8>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800127a:	4a52      	ldr	r2, [pc, #328]	; (80013c4 <HAL_GPIO_Init+0x2ec>)
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	f003 0303 	and.w	r3, r3, #3
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	220f      	movs	r2, #15
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a49      	ldr	r2, [pc, #292]	; (80013c8 <HAL_GPIO_Init+0x2f0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d019      	beq.n	80012da <HAL_GPIO_Init+0x202>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a48      	ldr	r2, [pc, #288]	; (80013cc <HAL_GPIO_Init+0x2f4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d013      	beq.n	80012d6 <HAL_GPIO_Init+0x1fe>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4a47      	ldr	r2, [pc, #284]	; (80013d0 <HAL_GPIO_Init+0x2f8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d00d      	beq.n	80012d2 <HAL_GPIO_Init+0x1fa>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a46      	ldr	r2, [pc, #280]	; (80013d4 <HAL_GPIO_Init+0x2fc>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d007      	beq.n	80012ce <HAL_GPIO_Init+0x1f6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4a45      	ldr	r2, [pc, #276]	; (80013d8 <HAL_GPIO_Init+0x300>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d101      	bne.n	80012ca <HAL_GPIO_Init+0x1f2>
 80012c6:	2304      	movs	r3, #4
 80012c8:	e008      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012ca:	2307      	movs	r3, #7
 80012cc:	e006      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <HAL_GPIO_Init+0x204>
 80012da:	2300      	movs	r3, #0
 80012dc:	69fa      	ldr	r2, [r7, #28]
 80012de:	f002 0203 	and.w	r2, r2, #3
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	4093      	lsls	r3, r2
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ec:	4935      	ldr	r1, [pc, #212]	; (80013c4 <HAL_GPIO_Init+0x2ec>)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	089b      	lsrs	r3, r3, #2
 80012f2:	3302      	adds	r3, #2
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <HAL_GPIO_Init+0x304>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	43db      	mvns	r3, r3
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	4013      	ands	r3, r2
 8001308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800131e:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <HAL_GPIO_Init+0x304>)
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001324:	4b2d      	ldr	r3, [pc, #180]	; (80013dc <HAL_GPIO_Init+0x304>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001348:	4a24      	ldr	r2, [pc, #144]	; (80013dc <HAL_GPIO_Init+0x304>)
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800134e:	4b23      	ldr	r3, [pc, #140]	; (80013dc <HAL_GPIO_Init+0x304>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <HAL_GPIO_Init+0x304>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <HAL_GPIO_Init+0x304>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139c:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <HAL_GPIO_Init+0x304>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3301      	adds	r3, #1
 80013a6:	61fb      	str	r3, [r7, #28]
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	f67f aea2 	bls.w	80010f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013b0:	bf00      	nop
 80013b2:	bf00      	nop
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40013800 	.word	0x40013800
 80013c8:	40020000 	.word	0x40020000
 80013cc:	40020400 	.word	0x40020400
 80013d0:	40020800 	.word	0x40020800
 80013d4:	40020c00 	.word	0x40020c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40013c00 	.word	0x40013c00

080013e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691a      	ldr	r2, [r3, #16]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e001      	b.n	8001402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800142c:	e003      	b.n	8001436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800142e:	887b      	ldrh	r3, [r7, #2]
 8001430:	041a      	lsls	r2, r3, #16
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f001 fafe 	bl	8002a5a <USB_GetMode>
 800145e:	4603      	mov	r3, r0
 8001460:	2b01      	cmp	r3, #1
 8001462:	f040 80f6 	bne.w	8001652 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fae2 	bl	8002a34 <USB_ReadInterrupts>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	f000 80ec 	beq.w	8001650 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4618      	mov	r0, r3
 800147e:	f001 fad9 	bl	8002a34 <USB_ReadInterrupts>
 8001482:	4603      	mov	r3, r0
 8001484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001488:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800148c:	d104      	bne.n	8001498 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001496:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f001 fac9 	bl	8002a34 <USB_ReadInterrupts>
 80014a2:	4603      	mov	r3, r0
 80014a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ac:	d104      	bne.n	80014b8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80014b6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fab9 	bl	8002a34 <USB_ReadInterrupts>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80014cc:	d104      	bne.n	80014d8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80014d6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 faa9 	bl	8002a34 <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d103      	bne.n	80014f4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2202      	movs	r2, #2
 80014f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f001 fa9b 	bl	8002a34 <USB_ReadInterrupts>
 80014fe:	4603      	mov	r3, r0
 8001500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001508:	d11c      	bne.n	8001544 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001512:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d10f      	bne.n	8001544 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001524:	2110      	movs	r1, #16
 8001526:	6938      	ldr	r0, [r7, #16]
 8001528:	f001 f9c8 	bl	80028bc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800152c:	6938      	ldr	r0, [r7, #16]
 800152e:	f001 f9f9 	bl	8002924 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2101      	movs	r1, #1
 8001538:	4618      	mov	r0, r3
 800153a:	f001 fa9c 	bl	8002a76 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f003 fe00 	bl	8005144 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fa73 	bl	8002a34 <USB_ReadInterrupts>
 800154e:	4603      	mov	r3, r0
 8001550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001558:	d102      	bne.n	8001560 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f001 f829 	bl	80025b2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f001 fa65 	bl	8002a34 <USB_ReadInterrupts>
 800156a:	4603      	mov	r3, r0
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b08      	cmp	r3, #8
 8001572:	d106      	bne.n	8001582 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f003 fdc9 	bl	800510c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2208      	movs	r2, #8
 8001580:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f001 fa54 	bl	8002a34 <USB_ReadInterrupts>
 800158c:	4603      	mov	r3, r0
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b10      	cmp	r3, #16
 8001594:	d101      	bne.n	800159a <HAL_HCD_IRQHandler+0x158>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_HCD_IRQHandler+0x15a>
 800159a:	2300      	movs	r3, #0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d012      	beq.n	80015c6 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	699a      	ldr	r2, [r3, #24]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 0210 	bic.w	r2, r2, #16
 80015ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 ff2c 	bl	800240e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f042 0210 	orr.w	r2, r2, #16
 80015c4:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f001 fa32 	bl	8002a34 <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80015da:	d13a      	bne.n	8001652 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f001 fa82 	bl	8002aea <USB_HC_ReadInterrupt>
 80015e6:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
 80015ec:	e025      	b.n	800163a <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d018      	beq.n	8001634 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	015a      	lsls	r2, r3, #5
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001618:	d106      	bne.n	8001628 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4619      	mov	r1, r3
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f836 	bl	8001692 <HCD_HC_IN_IRQHandler>
 8001626:	e005      	b.n	8001634 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 fb84 	bl	8001d3c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	3301      	adds	r3, #1
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	429a      	cmp	r2, r3
 8001642:	d3d4      	bcc.n	80015ee <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800164c:	615a      	str	r2, [r3, #20]
 800164e:	e000      	b.n	8001652 <HAL_HCD_IRQHandler+0x210>
      return;
 8001650:	bf00      	nop
    }
  }
}
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001666:	2b01      	cmp	r3, #1
 8001668:	d101      	bne.n	800166e <HAL_HCD_Stop+0x16>
 800166a:	2302      	movs	r3, #2
 800166c:	e00d      	b.n	800168a <HAL_HCD_Stop+0x32>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2201      	movs	r2, #1
 8001672:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f001 fb42 	bl	8002d04 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80016a8:	78fb      	ldrb	r3, [r7, #3]
 80016aa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	015a      	lsls	r2, r3, #5
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4413      	add	r3, r2
 80016b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b04      	cmp	r3, #4
 80016c0:	d11a      	bne.n	80016f8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016ce:	461a      	mov	r2, r3
 80016d0:	2304      	movs	r3, #4
 80016d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	212c      	movs	r1, #44	; 0x2c
 80016da:	fb01 f303 	mul.w	r3, r1, r3
 80016de:	4413      	add	r3, r2
 80016e0:	3361      	adds	r3, #97	; 0x61
 80016e2:	2206      	movs	r2, #6
 80016e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	4611      	mov	r1, r2
 80016f0:	4618      	mov	r0, r3
 80016f2:	f001 fa0b 	bl	8002b0c <USB_HC_Halt>
 80016f6:	e0af      	b.n	8001858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	015a      	lsls	r2, r3, #5
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4413      	add	r3, r2
 8001700:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800170e:	d11b      	bne.n	8001748 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4413      	add	r3, r2
 8001718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800171c:	461a      	mov	r2, r3
 800171e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001722:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	212c      	movs	r1, #44	; 0x2c
 800172a:	fb01 f303 	mul.w	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	3361      	adds	r3, #97	; 0x61
 8001732:	2207      	movs	r2, #7
 8001734:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f001 f9e3 	bl	8002b0c <USB_HC_Halt>
 8001746:	e087      	b.n	8001858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	015a      	lsls	r2, r3, #5
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	4413      	add	r3, r2
 8001750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0320 	and.w	r3, r3, #32
 800175a:	2b20      	cmp	r3, #32
 800175c:	d109      	bne.n	8001772 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	015a      	lsls	r2, r3, #5
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4413      	add	r3, r2
 8001766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800176a:	461a      	mov	r2, r3
 800176c:	2320      	movs	r3, #32
 800176e:	6093      	str	r3, [r2, #8]
 8001770:	e072      	b.n	8001858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	015a      	lsls	r2, r3, #5
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4413      	add	r3, r2
 800177a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	f003 0308 	and.w	r3, r3, #8
 8001784:	2b08      	cmp	r3, #8
 8001786:	d11a      	bne.n	80017be <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4413      	add	r3, r2
 8001790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001794:	461a      	mov	r2, r3
 8001796:	2308      	movs	r3, #8
 8001798:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	212c      	movs	r1, #44	; 0x2c
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	3361      	adds	r3, #97	; 0x61
 80017a8:	2205      	movs	r2, #5
 80017aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 f9a8 	bl	8002b0c <USB_HC_Halt>
 80017bc:	e04c      	b.n	8001858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	015a      	lsls	r2, r3, #5
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	4413      	add	r3, r2
 80017c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017d4:	d11b      	bne.n	800180e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	015a      	lsls	r2, r3, #5
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4413      	add	r3, r2
 80017de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017e2:	461a      	mov	r2, r3
 80017e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	212c      	movs	r1, #44	; 0x2c
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	3361      	adds	r3, #97	; 0x61
 80017f8:	2208      	movs	r2, #8
 80017fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	b2d2      	uxtb	r2, r2
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f001 f980 	bl	8002b0c <USB_HC_Halt>
 800180c:	e024      	b.n	8001858 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	015a      	lsls	r2, r3, #5
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4413      	add	r3, r2
 8001816:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001820:	2b80      	cmp	r3, #128	; 0x80
 8001822:	d119      	bne.n	8001858 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	015a      	lsls	r2, r3, #5
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4413      	add	r3, r2
 800182c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001830:	461a      	mov	r2, r3
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	212c      	movs	r1, #44	; 0x2c
 800183c:	fb01 f303 	mul.w	r3, r1, r3
 8001840:	4413      	add	r3, r2
 8001842:	3361      	adds	r3, #97	; 0x61
 8001844:	2206      	movs	r2, #6
 8001846:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f001 f95a 	bl	8002b0c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	015a      	lsls	r2, r3, #5
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	4413      	add	r3, r2
 8001860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800186a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800186e:	d112      	bne.n	8001896 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f001 f946 	bl	8002b0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	015a      	lsls	r2, r3, #5
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4413      	add	r3, r2
 8001888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800188c:	461a      	mov	r2, r3
 800188e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001892:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001894:	e24e      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	4413      	add	r3, r2
 800189e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 0301 	and.w	r3, r3, #1
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	f040 80df 	bne.w	8001a6c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d019      	beq.n	80018ea <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	212c      	movs	r1, #44	; 0x2c
 80018bc:	fb01 f303 	mul.w	r3, r1, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	3348      	adds	r3, #72	; 0x48
 80018c4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	0159      	lsls	r1, r3, #5
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	440b      	add	r3, r1
 80018ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80018d8:	1ad2      	subs	r2, r2, r3
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	202c      	movs	r0, #44	; 0x2c
 80018e0:	fb00 f303 	mul.w	r3, r0, r3
 80018e4:	440b      	add	r3, r1
 80018e6:	3350      	adds	r3, #80	; 0x50
 80018e8:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	212c      	movs	r1, #44	; 0x2c
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	3361      	adds	r3, #97	; 0x61
 80018f8:	2201      	movs	r2, #1
 80018fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	212c      	movs	r1, #44	; 0x2c
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	335c      	adds	r3, #92	; 0x5c
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	015a      	lsls	r2, r3, #5
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4413      	add	r3, r2
 8001916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800191a:	461a      	mov	r2, r3
 800191c:	2301      	movs	r3, #1
 800191e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	333f      	adds	r3, #63	; 0x3f
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d009      	beq.n	8001948 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	212c      	movs	r1, #44	; 0x2c
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	333f      	adds	r3, #63	; 0x3f
 8001942:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001944:	2b02      	cmp	r3, #2
 8001946:	d111      	bne.n	800196c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	b2d2      	uxtb	r2, r2
 8001950:	4611      	mov	r1, r2
 8001952:	4618      	mov	r0, r3
 8001954:	f001 f8da 	bl	8002b0c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	015a      	lsls	r2, r3, #5
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	4413      	add	r3, r2
 8001960:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001964:	461a      	mov	r2, r3
 8001966:	2310      	movs	r3, #16
 8001968:	6093      	str	r3, [r2, #8]
 800196a:	e03a      	b.n	80019e2 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	212c      	movs	r1, #44	; 0x2c
 8001972:	fb01 f303 	mul.w	r3, r1, r3
 8001976:	4413      	add	r3, r2
 8001978:	333f      	adds	r3, #63	; 0x3f
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d009      	beq.n	8001994 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	212c      	movs	r1, #44	; 0x2c
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	4413      	add	r3, r2
 800198c:	333f      	adds	r3, #63	; 0x3f
 800198e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8001990:	2b01      	cmp	r3, #1
 8001992:	d126      	bne.n	80019e2 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	015a      	lsls	r2, r3, #5
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	4413      	add	r3, r2
 800199c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	0151      	lsls	r1, r2, #5
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	440a      	add	r2, r1
 80019aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019b2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	212c      	movs	r1, #44	; 0x2c
 80019ba:	fb01 f303 	mul.w	r3, r1, r3
 80019be:	4413      	add	r3, r2
 80019c0:	3360      	adds	r3, #96	; 0x60
 80019c2:	2201      	movs	r2, #1
 80019c4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	b2d9      	uxtb	r1, r3
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	202c      	movs	r0, #44	; 0x2c
 80019d0:	fb00 f303 	mul.w	r3, r0, r3
 80019d4:	4413      	add	r3, r2
 80019d6:	3360      	adds	r3, #96	; 0x60
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	461a      	mov	r2, r3
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f003 fbbf 	bl	8005160 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d12b      	bne.n	8001a42 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	212c      	movs	r1, #44	; 0x2c
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	3348      	adds	r3, #72	; 0x48
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	202c      	movs	r0, #44	; 0x2c
 8001a00:	fb00 f202 	mul.w	r2, r0, r2
 8001a04:	440a      	add	r2, r1
 8001a06:	3240      	adds	r2, #64	; 0x40
 8001a08:	8812      	ldrh	r2, [r2, #0]
 8001a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 818e 	beq.w	8001d34 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	212c      	movs	r1, #44	; 0x2c
 8001a1e:	fb01 f303 	mul.w	r3, r1, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	3354      	adds	r3, #84	; 0x54
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	f083 0301 	eor.w	r3, r3, #1
 8001a2c:	b2d8      	uxtb	r0, r3
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	212c      	movs	r1, #44	; 0x2c
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	3354      	adds	r3, #84	; 0x54
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	701a      	strb	r2, [r3, #0]
}
 8001a40:	e178      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	212c      	movs	r1, #44	; 0x2c
 8001a48:	fb01 f303 	mul.w	r3, r1, r3
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3354      	adds	r3, #84	; 0x54
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	f083 0301 	eor.w	r3, r3, #1
 8001a56:	b2d8      	uxtb	r0, r3
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3354      	adds	r3, #84	; 0x54
 8001a66:	4602      	mov	r2, r0
 8001a68:	701a      	strb	r2, [r3, #0]
}
 8001a6a:	e163      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	015a      	lsls	r2, r3, #5
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4413      	add	r3, r2
 8001a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	f040 80f6 	bne.w	8001c70 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	212c      	movs	r1, #44	; 0x2c
 8001a8a:	fb01 f303 	mul.w	r3, r1, r3
 8001a8e:	4413      	add	r3, r2
 8001a90:	3361      	adds	r3, #97	; 0x61
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d109      	bne.n	8001aac <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	212c      	movs	r1, #44	; 0x2c
 8001a9e:	fb01 f303 	mul.w	r3, r1, r3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3360      	adds	r3, #96	; 0x60
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	701a      	strb	r2, [r3, #0]
 8001aaa:	e0c9      	b.n	8001c40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	212c      	movs	r1, #44	; 0x2c
 8001ab2:	fb01 f303 	mul.w	r3, r1, r3
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3361      	adds	r3, #97	; 0x61
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d109      	bne.n	8001ad4 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	212c      	movs	r1, #44	; 0x2c
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	4413      	add	r3, r2
 8001acc:	3360      	adds	r3, #96	; 0x60
 8001ace:	2205      	movs	r2, #5
 8001ad0:	701a      	strb	r2, [r3, #0]
 8001ad2:	e0b5      	b.n	8001c40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	212c      	movs	r1, #44	; 0x2c
 8001ada:	fb01 f303 	mul.w	r3, r1, r3
 8001ade:	4413      	add	r3, r2
 8001ae0:	3361      	adds	r3, #97	; 0x61
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b06      	cmp	r3, #6
 8001ae6:	d009      	beq.n	8001afc <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	212c      	movs	r1, #44	; 0x2c
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	4413      	add	r3, r2
 8001af4:	3361      	adds	r3, #97	; 0x61
 8001af6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d150      	bne.n	8001b9e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	212c      	movs	r1, #44	; 0x2c
 8001b02:	fb01 f303 	mul.w	r3, r1, r3
 8001b06:	4413      	add	r3, r2
 8001b08:	335c      	adds	r3, #92	; 0x5c
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	202c      	movs	r0, #44	; 0x2c
 8001b14:	fb00 f303 	mul.w	r3, r0, r3
 8001b18:	440b      	add	r3, r1
 8001b1a:	335c      	adds	r3, #92	; 0x5c
 8001b1c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	212c      	movs	r1, #44	; 0x2c
 8001b24:	fb01 f303 	mul.w	r3, r1, r3
 8001b28:	4413      	add	r3, r2
 8001b2a:	335c      	adds	r3, #92	; 0x5c
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d912      	bls.n	8001b58 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	335c      	adds	r3, #92	; 0x5c
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3360      	adds	r3, #96	; 0x60
 8001b52:	2204      	movs	r2, #4
 8001b54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b56:	e073      	b.n	8001c40 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	212c      	movs	r1, #44	; 0x2c
 8001b5e:	fb01 f303 	mul.w	r3, r1, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	3360      	adds	r3, #96	; 0x60
 8001b66:	2202      	movs	r2, #2
 8001b68:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001b80:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b88:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	015a      	lsls	r2, r3, #5
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4413      	add	r3, r2
 8001b92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b96:	461a      	mov	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b9c:	e050      	b.n	8001c40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	212c      	movs	r1, #44	; 0x2c
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	4413      	add	r3, r2
 8001baa:	3361      	adds	r3, #97	; 0x61
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d122      	bne.n	8001bf8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	3360      	adds	r3, #96	; 0x60
 8001bc0:	2202      	movs	r2, #2
 8001bc2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	015a      	lsls	r2, r3, #5
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	4413      	add	r3, r2
 8001bcc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001bda:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001be2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	015a      	lsls	r2, r3, #5
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	4413      	add	r3, r2
 8001bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	6013      	str	r3, [r2, #0]
 8001bf6:	e023      	b.n	8001c40 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	212c      	movs	r1, #44	; 0x2c
 8001bfe:	fb01 f303 	mul.w	r3, r1, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	3361      	adds	r3, #97	; 0x61
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b07      	cmp	r3, #7
 8001c0a:	d119      	bne.n	8001c40 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	212c      	movs	r1, #44	; 0x2c
 8001c12:	fb01 f303 	mul.w	r3, r1, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	335c      	adds	r3, #92	; 0x5c
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	202c      	movs	r0, #44	; 0x2c
 8001c24:	fb00 f303 	mul.w	r3, r0, r3
 8001c28:	440b      	add	r3, r1
 8001c2a:	335c      	adds	r3, #92	; 0x5c
 8001c2c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	212c      	movs	r1, #44	; 0x2c
 8001c34:	fb01 f303 	mul.w	r3, r1, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	3360      	adds	r3, #96	; 0x60
 8001c3c:	2204      	movs	r2, #4
 8001c3e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	015a      	lsls	r2, r3, #5
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4413      	add	r3, r2
 8001c48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	2302      	movs	r3, #2
 8001c50:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	b2d9      	uxtb	r1, r3
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	202c      	movs	r0, #44	; 0x2c
 8001c5c:	fb00 f303 	mul.w	r3, r0, r3
 8001c60:	4413      	add	r3, r2
 8001c62:	3360      	adds	r3, #96	; 0x60
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f003 fa79 	bl	8005160 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001c6e:	e061      	b.n	8001d34 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	015a      	lsls	r2, r3, #5
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 0310 	and.w	r3, r3, #16
 8001c82:	2b10      	cmp	r3, #16
 8001c84:	d156      	bne.n	8001d34 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	212c      	movs	r1, #44	; 0x2c
 8001c8c:	fb01 f303 	mul.w	r3, r1, r3
 8001c90:	4413      	add	r3, r2
 8001c92:	333f      	adds	r3, #63	; 0x3f
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d111      	bne.n	8001cbe <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	335c      	adds	r3, #92	; 0x5c
 8001ca8:	2200      	movs	r2, #0
 8001caa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	4611      	mov	r1, r2
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 ff28 	bl	8002b0c <USB_HC_Halt>
 8001cbc:	e031      	b.n	8001d22 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	212c      	movs	r1, #44	; 0x2c
 8001cc4:	fb01 f303 	mul.w	r3, r1, r3
 8001cc8:	4413      	add	r3, r2
 8001cca:	333f      	adds	r3, #63	; 0x3f
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d009      	beq.n	8001ce6 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	212c      	movs	r1, #44	; 0x2c
 8001cd8:	fb01 f303 	mul.w	r3, r1, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	333f      	adds	r3, #63	; 0x3f
 8001ce0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d11d      	bne.n	8001d22 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	212c      	movs	r1, #44	; 0x2c
 8001cec:	fb01 f303 	mul.w	r3, r1, r3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	335c      	adds	r3, #92	; 0x5c
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d110      	bne.n	8001d22 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3361      	adds	r3, #97	; 0x61
 8001d0e:	2203      	movs	r2, #3
 8001d10:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f000 fef5 	bl	8002b0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	015a      	lsls	r2, r3, #5
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d2e:	461a      	mov	r2, r3
 8001d30:	2310      	movs	r3, #16
 8001d32:	6093      	str	r3, [r2, #8]
}
 8001d34:	bf00      	nop
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	460b      	mov	r3, r1
 8001d46:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	015a      	lsls	r2, r3, #5
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d11a      	bne.n	8001da2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	015a      	lsls	r2, r3, #5
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	4413      	add	r3, r2
 8001d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d78:	461a      	mov	r2, r3
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	3361      	adds	r3, #97	; 0x61
 8001d8c:	2206      	movs	r2, #6
 8001d8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	4611      	mov	r1, r2
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 feb6 	bl	8002b0c <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8001da0:	e331      	b.n	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d12e      	bne.n	8001e16 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	212c      	movs	r1, #44	; 0x2c
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	333d      	adds	r3, #61	; 0x3d
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	f040 8313 	bne.w	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	212c      	movs	r1, #44	; 0x2c
 8001de6:	fb01 f303 	mul.w	r3, r1, r3
 8001dea:	4413      	add	r3, r2
 8001dec:	333d      	adds	r3, #61	; 0x3d
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	212c      	movs	r1, #44	; 0x2c
 8001df8:	fb01 f303 	mul.w	r3, r1, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3360      	adds	r3, #96	; 0x60
 8001e00:	2202      	movs	r2, #2
 8001e02:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fe7c 	bl	8002b0c <USB_HC_Halt>
}
 8001e14:	e2f7      	b.n	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e2c:	d112      	bne.n	8001e54 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	015a      	lsls	r2, r3, #5
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	4413      	add	r3, r2
 8001e36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e40:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f000 fe5d 	bl	8002b0c <USB_HC_Halt>
}
 8001e52:	e2d8      	b.n	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d140      	bne.n	8001eec <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	212c      	movs	r1, #44	; 0x2c
 8001e70:	fb01 f303 	mul.w	r3, r1, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	335c      	adds	r3, #92	; 0x5c
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b40      	cmp	r3, #64	; 0x40
 8001e90:	d111      	bne.n	8001eb6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	212c      	movs	r1, #44	; 0x2c
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	333d      	adds	r3, #61	; 0x3d
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	015a      	lsls	r2, r3, #5
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	212c      	movs	r1, #44	; 0x2c
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3361      	adds	r3, #97	; 0x61
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	b2d2      	uxtb	r2, r2
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fe11 	bl	8002b0c <USB_HC_Halt>
}
 8001eea:	e28c      	b.n	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d12c      	bne.n	8001f5c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3361      	adds	r3, #97	; 0x61
 8001f10:	2204      	movs	r2, #4
 8001f12:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	333d      	adds	r3, #61	; 0x3d
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	212c      	movs	r1, #44	; 0x2c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	335c      	adds	r3, #92	; 0x5c
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 fde2 	bl	8002b0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	461a      	mov	r2, r3
 8001f56:	2340      	movs	r3, #64	; 0x40
 8001f58:	6093      	str	r3, [r2, #8]
}
 8001f5a:	e254      	b.n	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	015a      	lsls	r2, r3, #5
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	4413      	add	r3, r2
 8001f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d11a      	bne.n	8001fa8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	015a      	lsls	r2, r3, #5
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4413      	add	r3, r2
 8001f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f7e:	461a      	mov	r2, r3
 8001f80:	2308      	movs	r3, #8
 8001f82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	212c      	movs	r1, #44	; 0x2c
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	4413      	add	r3, r2
 8001f90:	3361      	adds	r3, #97	; 0x61
 8001f92:	2205      	movs	r2, #5
 8001f94:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	b2d2      	uxtb	r2, r2
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f000 fdb3 	bl	8002b0c <USB_HC_Halt>
}
 8001fa6:	e22e      	b.n	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 0310 	and.w	r3, r3, #16
 8001fba:	2b10      	cmp	r3, #16
 8001fbc:	d140      	bne.n	8002040 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	212c      	movs	r1, #44	; 0x2c
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	335c      	adds	r3, #92	; 0x5c
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3361      	adds	r3, #97	; 0x61
 8001fde:	2203      	movs	r2, #3
 8001fe0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	212c      	movs	r1, #44	; 0x2c
 8001fe8:	fb01 f303 	mul.w	r3, r1, r3
 8001fec:	4413      	add	r3, r2
 8001fee:	333d      	adds	r3, #61	; 0x3d
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d112      	bne.n	800201c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	212c      	movs	r1, #44	; 0x2c
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	4413      	add	r3, r2
 8002002:	333c      	adds	r3, #60	; 0x3c
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d108      	bne.n	800201c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	212c      	movs	r1, #44	; 0x2c
 8002010:	fb01 f303 	mul.w	r3, r1, r3
 8002014:	4413      	add	r3, r2
 8002016:	333d      	adds	r3, #61	; 0x3d
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f000 fd70 	bl	8002b0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	015a      	lsls	r2, r3, #5
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	4413      	add	r3, r2
 8002034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002038:	461a      	mov	r2, r3
 800203a:	2310      	movs	r3, #16
 800203c:	6093      	str	r3, [r2, #8]
}
 800203e:	e1e2      	b.n	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002052:	2b80      	cmp	r3, #128	; 0x80
 8002054:	d164      	bne.n	8002120 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d111      	bne.n	8002082 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	3361      	adds	r3, #97	; 0x61
 800206c:	2206      	movs	r2, #6
 800206e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	4611      	mov	r1, r2
 800207a:	4618      	mov	r0, r3
 800207c:	f000 fd46 	bl	8002b0c <USB_HC_Halt>
 8002080:	e044      	b.n	800210c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	212c      	movs	r1, #44	; 0x2c
 8002088:	fb01 f303 	mul.w	r3, r1, r3
 800208c:	4413      	add	r3, r2
 800208e:	335c      	adds	r3, #92	; 0x5c
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	202c      	movs	r0, #44	; 0x2c
 800209a:	fb00 f303 	mul.w	r3, r0, r3
 800209e:	440b      	add	r3, r1
 80020a0:	335c      	adds	r3, #92	; 0x5c
 80020a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	335c      	adds	r3, #92	; 0x5c
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d920      	bls.n	80020fa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	212c      	movs	r1, #44	; 0x2c
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	4413      	add	r3, r2
 80020c4:	335c      	adds	r3, #92	; 0x5c
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3360      	adds	r3, #96	; 0x60
 80020d8:	2204      	movs	r2, #4
 80020da:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	b2d9      	uxtb	r1, r3
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	202c      	movs	r0, #44	; 0x2c
 80020e6:	fb00 f303 	mul.w	r3, r0, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	3360      	adds	r3, #96	; 0x60
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f003 f834 	bl	8005160 <HAL_HCD_HC_NotifyURBChange_Callback>
 80020f8:	e008      	b.n	800210c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	212c      	movs	r1, #44	; 0x2c
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	4413      	add	r3, r2
 8002106:	3360      	adds	r3, #96	; 0x60
 8002108:	2202      	movs	r2, #2
 800210a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	015a      	lsls	r2, r3, #5
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	4413      	add	r3, r2
 8002114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002118:	461a      	mov	r2, r3
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	6093      	str	r3, [r2, #8]
}
 800211e:	e172      	b.n	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	015a      	lsls	r2, r3, #5
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	4413      	add	r3, r2
 8002128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d11b      	bne.n	8002170 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	3361      	adds	r3, #97	; 0x61
 8002146:	2208      	movs	r2, #8
 8002148:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fcd9 	bl	8002b0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	4413      	add	r3, r2
 8002162:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002166:	461a      	mov	r2, r3
 8002168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216c:	6093      	str	r3, [r2, #8]
}
 800216e:	e14a      	b.n	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	4413      	add	r3, r2
 8002178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	f040 813f 	bne.w	8002406 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	212c      	movs	r1, #44	; 0x2c
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	4413      	add	r3, r2
 8002194:	3361      	adds	r3, #97	; 0x61
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d17d      	bne.n	8002298 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	212c      	movs	r1, #44	; 0x2c
 80021a2:	fb01 f303 	mul.w	r3, r1, r3
 80021a6:	4413      	add	r3, r2
 80021a8:	3360      	adds	r3, #96	; 0x60
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	212c      	movs	r1, #44	; 0x2c
 80021b4:	fb01 f303 	mul.w	r3, r1, r3
 80021b8:	4413      	add	r3, r2
 80021ba:	333f      	adds	r3, #63	; 0x3f
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d00a      	beq.n	80021d8 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	212c      	movs	r1, #44	; 0x2c
 80021c8:	fb01 f303 	mul.w	r3, r1, r3
 80021cc:	4413      	add	r3, r2
 80021ce:	333f      	adds	r3, #63	; 0x3f
 80021d0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	f040 8100 	bne.w	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d113      	bne.n	8002208 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	212c      	movs	r1, #44	; 0x2c
 80021e6:	fb01 f303 	mul.w	r3, r1, r3
 80021ea:	4413      	add	r3, r2
 80021ec:	3355      	adds	r3, #85	; 0x55
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	f083 0301 	eor.w	r3, r3, #1
 80021f4:	b2d8      	uxtb	r0, r3
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	212c      	movs	r1, #44	; 0x2c
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	4413      	add	r3, r2
 8002202:	3355      	adds	r3, #85	; 0x55
 8002204:	4602      	mov	r2, r0
 8002206:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b01      	cmp	r3, #1
 800220e:	f040 80e3 	bne.w	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	212c      	movs	r1, #44	; 0x2c
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	334c      	adds	r3, #76	; 0x4c
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 80d8 	beq.w	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	212c      	movs	r1, #44	; 0x2c
 800222e:	fb01 f303 	mul.w	r3, r1, r3
 8002232:	4413      	add	r3, r2
 8002234:	334c      	adds	r3, #76	; 0x4c
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	202c      	movs	r0, #44	; 0x2c
 800223e:	fb00 f202 	mul.w	r2, r0, r2
 8002242:	440a      	add	r2, r1
 8002244:	3240      	adds	r2, #64	; 0x40
 8002246:	8812      	ldrh	r2, [r2, #0]
 8002248:	4413      	add	r3, r2
 800224a:	3b01      	subs	r3, #1
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	202c      	movs	r0, #44	; 0x2c
 8002252:	fb00 f202 	mul.w	r2, r0, r2
 8002256:	440a      	add	r2, r1
 8002258:	3240      	adds	r2, #64	; 0x40
 800225a:	8812      	ldrh	r2, [r2, #0]
 800225c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002260:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80b5 	beq.w	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	212c      	movs	r1, #44	; 0x2c
 8002274:	fb01 f303 	mul.w	r3, r1, r3
 8002278:	4413      	add	r3, r2
 800227a:	3355      	adds	r3, #85	; 0x55
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f083 0301 	eor.w	r3, r3, #1
 8002282:	b2d8      	uxtb	r0, r3
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3355      	adds	r3, #85	; 0x55
 8002292:	4602      	mov	r2, r0
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e09f      	b.n	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	212c      	movs	r1, #44	; 0x2c
 800229e:	fb01 f303 	mul.w	r3, r1, r3
 80022a2:	4413      	add	r3, r2
 80022a4:	3361      	adds	r3, #97	; 0x61
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d109      	bne.n	80022c0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	212c      	movs	r1, #44	; 0x2c
 80022b2:	fb01 f303 	mul.w	r3, r1, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	3360      	adds	r3, #96	; 0x60
 80022ba:	2202      	movs	r2, #2
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	e08b      	b.n	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	212c      	movs	r1, #44	; 0x2c
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	3361      	adds	r3, #97	; 0x61
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d109      	bne.n	80022e8 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	212c      	movs	r1, #44	; 0x2c
 80022da:	fb01 f303 	mul.w	r3, r1, r3
 80022de:	4413      	add	r3, r2
 80022e0:	3360      	adds	r3, #96	; 0x60
 80022e2:	2202      	movs	r2, #2
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e077      	b.n	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	212c      	movs	r1, #44	; 0x2c
 80022ee:	fb01 f303 	mul.w	r3, r1, r3
 80022f2:	4413      	add	r3, r2
 80022f4:	3361      	adds	r3, #97	; 0x61
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	d109      	bne.n	8002310 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	212c      	movs	r1, #44	; 0x2c
 8002302:	fb01 f303 	mul.w	r3, r1, r3
 8002306:	4413      	add	r3, r2
 8002308:	3360      	adds	r3, #96	; 0x60
 800230a:	2205      	movs	r2, #5
 800230c:	701a      	strb	r2, [r3, #0]
 800230e:	e063      	b.n	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	212c      	movs	r1, #44	; 0x2c
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	4413      	add	r3, r2
 800231c:	3361      	adds	r3, #97	; 0x61
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b06      	cmp	r3, #6
 8002322:	d009      	beq.n	8002338 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	212c      	movs	r1, #44	; 0x2c
 800232a:	fb01 f303 	mul.w	r3, r1, r3
 800232e:	4413      	add	r3, r2
 8002330:	3361      	adds	r3, #97	; 0x61
 8002332:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002334:	2b08      	cmp	r3, #8
 8002336:	d14f      	bne.n	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	212c      	movs	r1, #44	; 0x2c
 800233e:	fb01 f303 	mul.w	r3, r1, r3
 8002342:	4413      	add	r3, r2
 8002344:	335c      	adds	r3, #92	; 0x5c
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	202c      	movs	r0, #44	; 0x2c
 8002350:	fb00 f303 	mul.w	r3, r0, r3
 8002354:	440b      	add	r3, r1
 8002356:	335c      	adds	r3, #92	; 0x5c
 8002358:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	212c      	movs	r1, #44	; 0x2c
 8002360:	fb01 f303 	mul.w	r3, r1, r3
 8002364:	4413      	add	r3, r2
 8002366:	335c      	adds	r3, #92	; 0x5c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d912      	bls.n	8002394 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	212c      	movs	r1, #44	; 0x2c
 8002374:	fb01 f303 	mul.w	r3, r1, r3
 8002378:	4413      	add	r3, r2
 800237a:	335c      	adds	r3, #92	; 0x5c
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3360      	adds	r3, #96	; 0x60
 800238e:	2204      	movs	r2, #4
 8002390:	701a      	strb	r2, [r3, #0]
 8002392:	e021      	b.n	80023d8 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3360      	adds	r3, #96	; 0x60
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023bc:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023c4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	015a      	lsls	r2, r3, #5
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4413      	add	r3, r2
 80023ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023d2:	461a      	mov	r2, r3
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	015a      	lsls	r2, r3, #5
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	4413      	add	r3, r2
 80023e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023e4:	461a      	mov	r2, r3
 80023e6:	2302      	movs	r3, #2
 80023e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	b2d9      	uxtb	r1, r3
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	202c      	movs	r0, #44	; 0x2c
 80023f4:	fb00 f303 	mul.w	r3, r0, r3
 80023f8:	4413      	add	r3, r2
 80023fa:	3360      	adds	r3, #96	; 0x60
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	461a      	mov	r2, r3
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f002 fead 	bl	8005160 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002406:	bf00      	nop
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b08a      	sub	sp, #40	; 0x28
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	0c5b      	lsrs	r3, r3, #17
 8002434:	f003 030f 	and.w	r3, r3, #15
 8002438:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002442:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d004      	beq.n	8002454 <HCD_RXQLVL_IRQHandler+0x46>
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b05      	cmp	r3, #5
 800244e:	f000 80a9 	beq.w	80025a4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002452:	e0aa      	b.n	80025aa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 80a6 	beq.w	80025a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	3344      	adds	r3, #68	; 0x44
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	f000 809b 	beq.w	80025a8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3350      	adds	r3, #80	; 0x50
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	441a      	add	r2, r3
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	202c      	movs	r0, #44	; 0x2c
 800248c:	fb00 f303 	mul.w	r3, r0, r3
 8002490:	440b      	add	r3, r1
 8002492:	334c      	adds	r3, #76	; 0x4c
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d87a      	bhi.n	8002590 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	212c      	movs	r1, #44	; 0x2c
 80024a4:	fb01 f303 	mul.w	r3, r1, r3
 80024a8:	4413      	add	r3, r2
 80024aa:	3344      	adds	r3, #68	; 0x44
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	b292      	uxth	r2, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f000 fa66 	bl	8002984 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	212c      	movs	r1, #44	; 0x2c
 80024be:	fb01 f303 	mul.w	r3, r1, r3
 80024c2:	4413      	add	r3, r2
 80024c4:	3344      	adds	r3, #68	; 0x44
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	441a      	add	r2, r3
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	202c      	movs	r0, #44	; 0x2c
 80024d2:	fb00 f303 	mul.w	r3, r0, r3
 80024d6:	440b      	add	r3, r1
 80024d8:	3344      	adds	r3, #68	; 0x44
 80024da:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	212c      	movs	r1, #44	; 0x2c
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	4413      	add	r3, r2
 80024e8:	3350      	adds	r3, #80	; 0x50
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	441a      	add	r2, r3
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	202c      	movs	r0, #44	; 0x2c
 80024f6:	fb00 f303 	mul.w	r3, r0, r3
 80024fa:	440b      	add	r3, r1
 80024fc:	3350      	adds	r3, #80	; 0x50
 80024fe:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	4413      	add	r3, r2
 8002508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	0cdb      	lsrs	r3, r3, #19
 8002510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002514:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	212c      	movs	r1, #44	; 0x2c
 800251c:	fb01 f303 	mul.w	r3, r1, r3
 8002520:	4413      	add	r3, r2
 8002522:	3340      	adds	r3, #64	; 0x40
 8002524:	881b      	ldrh	r3, [r3, #0]
 8002526:	461a      	mov	r2, r3
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4293      	cmp	r3, r2
 800252c:	d13c      	bne.n	80025a8 <HCD_RXQLVL_IRQHandler+0x19a>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d039      	beq.n	80025a8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	4413      	add	r3, r2
 800253c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800254a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002552:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	015a      	lsls	r2, r3, #5
 8002558:	6a3b      	ldr	r3, [r7, #32]
 800255a:	4413      	add	r3, r2
 800255c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002560:	461a      	mov	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3354      	adds	r3, #84	; 0x54
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2d8      	uxtb	r0, r3
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	212c      	movs	r1, #44	; 0x2c
 8002582:	fb01 f303 	mul.w	r3, r1, r3
 8002586:	4413      	add	r3, r2
 8002588:	3354      	adds	r3, #84	; 0x54
 800258a:	4602      	mov	r2, r0
 800258c:	701a      	strb	r2, [r3, #0]
      break;
 800258e:	e00b      	b.n	80025a8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	212c      	movs	r1, #44	; 0x2c
 8002596:	fb01 f303 	mul.w	r3, r1, r3
 800259a:	4413      	add	r3, r2
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	2204      	movs	r2, #4
 80025a0:	701a      	strb	r2, [r3, #0]
      break;
 80025a2:	e001      	b.n	80025a8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80025a4:	bf00      	nop
 80025a6:	e000      	b.n	80025aa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80025a8:	bf00      	nop
  }
}
 80025aa:	bf00      	nop
 80025ac:	3728      	adds	r7, #40	; 0x28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80025de:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d10b      	bne.n	8002602 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d102      	bne.n	80025fa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f002 fd97 	bl	8005128 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b08      	cmp	r3, #8
 800260a:	d132      	bne.n	8002672 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f043 0308 	orr.w	r3, r3, #8
 8002612:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b04      	cmp	r3, #4
 800261c:	d126      	bne.n	800266c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d113      	bne.n	800264e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800262c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002630:	d106      	bne.n	8002640 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f000 fa1c 	bl	8002a76 <USB_InitFSLSPClkSel>
 800263e:	e011      	b.n	8002664 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	4618      	mov	r0, r3
 8002648:	f000 fa15 	bl	8002a76 <USB_InitFSLSPClkSel>
 800264c:	e00a      	b.n	8002664 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d106      	bne.n	8002664 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800265c:	461a      	mov	r2, r3
 800265e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002662:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f002 fd8d 	bl	8005184 <HAL_HCD_PortEnabled_Callback>
 800266a:	e002      	b.n	8002672 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f002 fd97 	bl	80051a0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b20      	cmp	r3, #32
 800267a:	d103      	bne.n	8002684 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f043 0320 	orr.w	r3, r3, #32
 8002682:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	6013      	str	r3, [r2, #0]
}
 8002690:	bf00      	nop
 8002692:	3718      	adds	r7, #24
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0301 	and.w	r3, r3, #1
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d038      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026c0:	4b68      	ldr	r3, [pc, #416]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80026c6:	f7fe fbf1 	bl	8000eac <HAL_GetTick>
 80026ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80026ce:	f7fe fbed 	bl	8000eac <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e0bd      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026e0:	4b61      	ldr	r3, [pc, #388]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	019b      	lsls	r3, r3, #6
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	071b      	lsls	r3, r3, #28
 80026fe:	495a      	ldr	r1, [pc, #360]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002706:	4b57      	ldr	r3, [pc, #348]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002708:	2201      	movs	r2, #1
 800270a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800270c:	f7fe fbce 	bl	8000eac <HAL_GetTick>
 8002710:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002714:	f7fe fbca 	bl	8000eac <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e09a      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002726:	4b50      	ldr	r3, [pc, #320]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8083 	beq.w	8002846 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	4b48      	ldr	r3, [pc, #288]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002748:	4a47      	ldr	r2, [pc, #284]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	6413      	str	r3, [r2, #64]	; 0x40
 8002750:	4b45      	ldr	r3, [pc, #276]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	60fb      	str	r3, [r7, #12]
 800275a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a42      	ldr	r2, [pc, #264]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002766:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002768:	f7fe fba0 	bl	8000eac <HAL_GetTick>
 800276c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7fe fb9c 	bl	8000eac <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e06c      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002782:	4b3a      	ldr	r3, [pc, #232]	; (800286c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800278e:	4b36      	ldr	r3, [pc, #216]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002796:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d02f      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x166>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d028      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ac:	4b2e      	ldr	r3, [pc, #184]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027b6:	4b2e      	ldr	r3, [pc, #184]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027bc:	4b2c      	ldr	r3, [pc, #176]	; (8002870 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80027c2:	4a29      	ldr	r2, [pc, #164]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027c8:	4b27      	ldr	r3, [pc, #156]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d114      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80027d4:	f7fe fb6a 	bl	8000eac <HAL_GetTick>
 80027d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e00a      	b.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe fb66 	bl	8000eac <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e034      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0ee      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800280a:	d10d      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800280c:	4b16      	ldr	r3, [pc, #88]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	4911      	ldr	r1, [pc, #68]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002822:	4313      	orrs	r3, r2
 8002824:	608b      	str	r3, [r1, #8]
 8002826:	e005      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a0e      	ldr	r2, [pc, #56]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800282e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002832:	6093      	str	r3, [r2, #8]
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002840:	4909      	ldr	r1, [pc, #36]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002842:	4313      	orrs	r3, r2
 8002844:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	7d1a      	ldrb	r2, [r3, #20]
 8002856:	4b07      	ldr	r3, [pc, #28]	; (8002874 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002858:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	42470068 	.word	0x42470068
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470e40 	.word	0x42470e40
 8002874:	424711e0 	.word	0x424711e0

08002878 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f043 0201 	orr.w	r2, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800288c:	2300      	movs	r3, #0
}
 800288e:	4618      	mov	r0, r3
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f023 0201 	bic.w	r2, r3, #1
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3301      	adds	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4a13      	ldr	r2, [pc, #76]	; (8002920 <USB_FlushTxFifo+0x64>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e01b      	b.n	8002914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	691b      	ldr	r3, [r3, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	daf2      	bge.n	80028ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	019b      	lsls	r3, r3, #6
 80028ec:	f043 0220 	orr.w	r2, r3, #32
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	3301      	adds	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	4a08      	ldr	r2, [pc, #32]	; (8002920 <USB_FlushTxFifo+0x64>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e006      	b.n	8002914 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b20      	cmp	r3, #32
 8002910:	d0f0      	beq.n	80028f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	00030d40 	.word	0x00030d40

08002924 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3301      	adds	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	4a11      	ldr	r2, [pc, #68]	; (8002980 <USB_FlushRxFifo+0x5c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e018      	b.n	8002974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	2b00      	cmp	r3, #0
 8002948:	daf2      	bge.n	8002930 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2210      	movs	r2, #16
 8002952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	3301      	adds	r3, #1
 8002958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	4a08      	ldr	r2, [pc, #32]	; (8002980 <USB_FlushRxFifo+0x5c>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e006      	b.n	8002974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b10      	cmp	r3, #16
 8002970:	d0f0      	beq.n	8002954 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr
 8002980:	00030d40 	.word	0x00030d40

08002984 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8002984:	b480      	push	{r7}
 8002986:	b08b      	sub	sp, #44	; 0x2c
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	4613      	mov	r3, r2
 8002990:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	b29b      	uxth	r3, r3
 80029a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
 80029ae:	e014      	b.n	80029da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3301      	adds	r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	3301      	adds	r3, #1
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3301      	adds	r3, #1
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	3301      	adds	r3, #1
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	3301      	adds	r3, #1
 80029d8:	623b      	str	r3, [r7, #32]
 80029da:	6a3a      	ldr	r2, [r7, #32]
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d3e6      	bcc.n	80029b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80029e2:	8bfb      	ldrh	r3, [r7, #30]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01e      	beq.n	8002a26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f2:	461a      	mov	r2, r3
 80029f4:	f107 0310 	add.w	r3, r7, #16
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	fa22 f303 	lsr.w	r3, r2, r3
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0c:	701a      	strb	r2, [r3, #0]
      i++;
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	3301      	adds	r3, #1
 8002a12:	623b      	str	r3, [r7, #32]
      pDest++;
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	3301      	adds	r3, #1
 8002a18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8002a1a:	8bfb      	ldrh	r3, [r7, #30]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8002a20:	8bfb      	ldrh	r3, [r7, #30]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d1ea      	bne.n	80029fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8002a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	372c      	adds	r7, #44	; 0x2c
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3714      	adds	r7, #20
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0301 	and.w	r3, r3, #1
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a94:	f023 0303 	bic.w	r3, r3, #3
 8002a98:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	68f9      	ldr	r1, [r7, #12]
 8002aaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8002ab2:	78fb      	ldrb	r3, [r7, #3]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d107      	bne.n	8002ac8 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002abe:	461a      	mov	r2, r3
 8002ac0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8002ac4:	6053      	str	r3, [r2, #4]
 8002ac6:	e009      	b.n	8002adc <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d106      	bne.n	8002adc <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	f241 7370 	movw	r3, #6000	; 0x1770
 8002ada:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b085      	sub	sp, #20
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	b29b      	uxth	r3, r3
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	015a      	lsls	r2, r3, #5
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	0c9b      	lsrs	r3, r3, #18
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0fdb      	lsrs	r3, r3, #31
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b20      	cmp	r3, #32
 8002b5a:	d104      	bne.n	8002b66 <USB_HC_Halt+0x5a>
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e0c8      	b.n	8002cf8 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <USB_HC_Halt+0x66>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d163      	bne.n	8002c3a <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	015a      	lsls	r2, r3, #5
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	4413      	add	r3, r2
 8002b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	0151      	lsls	r1, r2, #5
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	440a      	add	r2, r1
 8002b88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b90:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 80ab 	bne.w	8002cf6 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d133      	bne.n	8002c14 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69ba      	ldr	r2, [r7, #24]
 8002bbc:	0151      	lsls	r1, r2, #5
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bca:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	0151      	lsls	r1, r2, #5
 8002bde:	69fa      	ldr	r2, [r7, #28]
 8002be0:	440a      	add	r2, r1
 8002be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bea:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bf8:	d81d      	bhi.n	8002c36 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c10:	d0ec      	beq.n	8002bec <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002c12:	e070      	b.n	8002cf6 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	0151      	lsls	r1, r2, #5
 8002c26:	69fa      	ldr	r2, [r7, #28]
 8002c28:	440a      	add	r2, r1
 8002c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c32:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002c34:	e05f      	b.n	8002cf6 <USB_HC_Halt+0x1ea>
            break;
 8002c36:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8002c38:	e05d      	b.n	8002cf6 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	015a      	lsls	r2, r3, #5
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	4413      	add	r3, r2
 8002c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	0151      	lsls	r1, r2, #5
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	440a      	add	r2, r1
 8002c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c58:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d133      	bne.n	8002cd2 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	015a      	lsls	r2, r3, #5
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	0151      	lsls	r1, r2, #5
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	440a      	add	r2, r1
 8002c80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c88:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	015a      	lsls	r2, r3, #5
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	4413      	add	r3, r2
 8002c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	0151      	lsls	r1, r2, #5
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	440a      	add	r2, r1
 8002ca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ca8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	3301      	adds	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb6:	d81d      	bhi.n	8002cf4 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cce:	d0ec      	beq.n	8002caa <USB_HC_Halt+0x19e>
 8002cd0:	e011      	b.n	8002cf6 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	015a      	lsls	r2, r3, #5
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	4413      	add	r3, r2
 8002cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	0151      	lsls	r1, r2, #5
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	440a      	add	r2, r1
 8002ce8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e000      	b.n	8002cf6 <USB_HC_Halt+0x1ea>
          break;
 8002cf4:	bf00      	nop
    }
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3724      	adds	r7, #36	; 0x24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b088      	sub	sp, #32
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fdbe 	bl	800289a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002d1e:	2110      	movs	r1, #16
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff fdcb 	bl	80028bc <USB_FlushTxFifo>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff fdf7 	bl	8002924 <USB_FlushRxFifo>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	e01f      	b.n	8002d86 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002d6c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	3301      	adds	r3, #1
 8002d84:	61bb      	str	r3, [r7, #24]
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	2b0f      	cmp	r3, #15
 8002d8a:	d9dc      	bls.n	8002d46 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e034      	b.n	8002dfc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002da8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002db0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002db8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd8:	d80c      	bhi.n	8002df4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002df0:	d0ec      	beq.n	8002dcc <USB_StopHost+0xc8>
 8002df2:	e000      	b.n	8002df6 <USB_StopHost+0xf2>
        break;
 8002df4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b0f      	cmp	r3, #15
 8002e00:	d9c7      	bls.n	8002d92 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f04f 32ff 	mov.w	r2, #4294967295
 8002e16:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff fd2d 	bl	8002878 <USB_EnableGlobalInt>

  return ret;
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3720      	adds	r7, #32
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f804 	bl	8002e4c <USBH_HandleSof>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b0b      	cmp	r3, #11
 8002e5c:	d10a      	bne.n	8002e74 <USBH_HandleSof+0x28>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
  }
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	f000 f91a 	bl	80030dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8002ea8:	bf00      	nop
}
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8002ec0:	bf00      	nop
}
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8002f00:	2200      	movs	r2, #0
 8002f02:	4619      	mov	r1, r3
 8002f04:	f000 f8ea 	bl	80030dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f002 f942 	bl	80051bc <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	791b      	ldrb	r3, [r3, #4]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f830 	bl	8002fa4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	795b      	ldrb	r3, [r3, #5]
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f82a 	bl	8002fa4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8002f64:	2200      	movs	r2, #0
 8002f66:	4619      	mov	r1, r3
 8002f68:	f000 f8b8 	bl	80030dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b082      	sub	sp, #8
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8002f92:	2200      	movs	r2, #0
 8002f94:	4619      	mov	r1, r3
 8002f96:	f000 f8a1 	bl	80030dc <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	460b      	mov	r3, r1
 8002fae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8002fb0:	78fb      	ldrb	r3, [r7, #3]
 8002fb2:	2b0f      	cmp	r3, #15
 8002fb4:	d80d      	bhi.n	8002fd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	33e0      	adds	r3, #224	; 0xe0
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	33e0      	adds	r3, #224	; 0xe0
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002fea:	2300      	movs	r3, #0
 8002fec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002fee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ff2:	2b84      	cmp	r3, #132	; 0x84
 8002ff4:	d005      	beq.n	8003002 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ff6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3303      	adds	r3, #3
 8003000:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003002:	68fb      	ldr	r3, [r7, #12]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003016:	f3ef 8305 	mrs	r3, IPSR
 800301a:	607b      	str	r3, [r7, #4]
  return(result);
 800301c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
}
 8003028:	4618      	mov	r0, r3
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003038:	f000 ff24 	bl	8003e84 <vTaskStartScheduler>
  
  return osOK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}

08003042 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003044:	b089      	sub	sp, #36	; 0x24
 8003046:	af04      	add	r7, sp, #16
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <osThreadCreate+0x54>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d01c      	beq.n	8003096 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685c      	ldr	r4, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681d      	ldr	r5, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691e      	ldr	r6, [r3, #16]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff ffb6 	bl	8002fe0 <makeFreeRtosPriority>
 8003074:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800307e:	9202      	str	r2, [sp, #8]
 8003080:	9301      	str	r3, [sp, #4]
 8003082:	9100      	str	r1, [sp, #0]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4632      	mov	r2, r6
 8003088:	4629      	mov	r1, r5
 800308a:	4620      	mov	r0, r4
 800308c:	f000 fd66 	bl	8003b5c <xTaskCreateStatic>
 8003090:	4603      	mov	r3, r0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e01c      	b.n	80030d0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685c      	ldr	r4, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80030a2:	b29e      	uxth	r6, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff ff98 	bl	8002fe0 <makeFreeRtosPriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	9200      	str	r2, [sp, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	4632      	mov	r2, r6
 80030be:	4629      	mov	r1, r5
 80030c0:	4620      	mov	r0, r4
 80030c2:	f000 fda8 	bl	8003c16 <xTaskCreate>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d001      	beq.n	80030d0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80030d0:	68fb      	ldr	r3, [r7, #12]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030dc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <osMessagePut+0x1e>
    ticks = 1;
 80030f6:	2301      	movs	r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80030fa:	f7ff ff89 	bl	8003010 <inHandlerMode>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d018      	beq.n	8003136 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003104:	f107 0210 	add.w	r2, r7, #16
 8003108:	f107 0108 	add.w	r1, r7, #8
 800310c:	2300      	movs	r3, #0
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 fa98 	bl	8003644 <xQueueGenericSendFromISR>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d001      	beq.n	800311e <osMessagePut+0x42>
      return osErrorOS;
 800311a:	23ff      	movs	r3, #255	; 0xff
 800311c:	e018      	b.n	8003150 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d014      	beq.n	800314e <osMessagePut+0x72>
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <osMessagePut+0x7c>)
 8003126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	e00b      	b.n	800314e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003136:	f107 0108 	add.w	r1, r7, #8
 800313a:	2300      	movs	r3, #0
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 f982 	bl	8003448 <xQueueGenericSend>
 8003144:	4603      	mov	r3, r0
 8003146:	2b01      	cmp	r3, #1
 8003148:	d001      	beq.n	800314e <osMessagePut+0x72>
      return osErrorOS;
 800314a:	23ff      	movs	r3, #255	; 0xff
 800314c:	e000      	b.n	8003150 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	e000ed04 	.word	0xe000ed04

0800315c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f103 0208 	add.w	r2, r3, #8
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f103 0208 	add.w	r2, r3, #8
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f103 0208 	add.w	r2, r3, #8
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003190:	bf00      	nop
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	1c5a      	adds	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d103      	bne.n	800321e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e00c      	b.n	8003238 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3308      	adds	r3, #8
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e002      	b.n	800322c <vListInsert+0x2e>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	429a      	cmp	r2, r3
 8003236:	d2f6      	bcs.n	8003226 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685a      	ldr	r2, [r3, #4]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	601a      	str	r2, [r3, #0]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6892      	ldr	r2, [r2, #8]
 8003286:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6852      	ldr	r2, [r2, #4]
 8003290:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	429a      	cmp	r2, r3
 800329a:	d103      	bne.n	80032a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	1e5a      	subs	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80032ea:	bf00      	nop
 80032ec:	e7fe      	b.n	80032ec <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80032ee:	f001 fc01 	bl	8004af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fa:	68f9      	ldr	r1, [r7, #12]
 80032fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80032fe:	fb01 f303 	mul.w	r3, r1, r3
 8003302:	441a      	add	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800331e:	3b01      	subs	r3, #1
 8003320:	68f9      	ldr	r1, [r7, #12]
 8003322:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	441a      	add	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	22ff      	movs	r2, #255	; 0xff
 8003332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	22ff      	movs	r2, #255	; 0xff
 800333a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d114      	bne.n	800336e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01a      	beq.n	8003382 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3310      	adds	r3, #16
 8003350:	4618      	mov	r0, r3
 8003352:	f000 ffd9 	bl	8004308 <xTaskRemoveFromEventList>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d012      	beq.n	8003382 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800335c:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <xQueueGenericReset+0xcc>)
 800335e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	e009      	b.n	8003382 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3310      	adds	r3, #16
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fef2 	bl	800315c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	3324      	adds	r3, #36	; 0x24
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff feed 	bl	800315c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003382:	f001 fbe7 	bl	8004b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003386:	2301      	movs	r3, #1
}
 8003388:	4618      	mov	r0, r3
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	e000ed04 	.word	0xe000ed04

08003394 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <xQueueGenericCreate+0x2a>
	__asm volatile
 80033a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ac:	f383 8811 	msr	BASEPRI, r3
 80033b0:	f3bf 8f6f 	isb	sy
 80033b4:	f3bf 8f4f 	dsb	sy
 80033b8:	613b      	str	r3, [r7, #16]
}
 80033ba:	bf00      	nop
 80033bc:	e7fe      	b.n	80033bc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3348      	adds	r3, #72	; 0x48
 80033cc:	4618      	mov	r0, r3
 80033ce:	f001 fcb3 	bl	8004d38 <pvPortMalloc>
 80033d2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d011      	beq.n	80033fe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3348      	adds	r3, #72	; 0x48
 80033e2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033ec:	79fa      	ldrb	r2, [r7, #7]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	4613      	mov	r3, r2
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	68b9      	ldr	r1, [r7, #8]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 f805 	bl	8003408 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033fe:	69bb      	ldr	r3, [r7, #24]
	}
 8003400:	4618      	mov	r0, r3
 8003402:	3720      	adds	r7, #32
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
 8003414:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d103      	bne.n	8003424 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	601a      	str	r2, [r3, #0]
 8003422:	e002      	b.n	800342a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003436:	2101      	movs	r1, #1
 8003438:	69b8      	ldr	r0, [r7, #24]
 800343a:	f7ff ff43 	bl	80032c4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08e      	sub	sp, #56	; 0x38
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
 8003454:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003456:	2300      	movs	r3, #0
 8003458:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10a      	bne.n	800347a <xQueueGenericSend+0x32>
	__asm volatile
 8003464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003468:	f383 8811 	msr	BASEPRI, r3
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	f3bf 8f4f 	dsb	sy
 8003474:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003476:	bf00      	nop
 8003478:	e7fe      	b.n	8003478 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d103      	bne.n	8003488 <xQueueGenericSend+0x40>
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <xQueueGenericSend+0x44>
 8003488:	2301      	movs	r3, #1
 800348a:	e000      	b.n	800348e <xQueueGenericSend+0x46>
 800348c:	2300      	movs	r3, #0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <xQueueGenericSend+0x60>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	f383 8811 	msr	BASEPRI, r3
 800349a:	f3bf 8f6f 	isb	sy
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034a4:	bf00      	nop
 80034a6:	e7fe      	b.n	80034a6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d103      	bne.n	80034b6 <xQueueGenericSend+0x6e>
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <xQueueGenericSend+0x72>
 80034b6:	2301      	movs	r3, #1
 80034b8:	e000      	b.n	80034bc <xQueueGenericSend+0x74>
 80034ba:	2300      	movs	r3, #0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <xQueueGenericSend+0x8e>
	__asm volatile
 80034c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034c4:	f383 8811 	msr	BASEPRI, r3
 80034c8:	f3bf 8f6f 	isb	sy
 80034cc:	f3bf 8f4f 	dsb	sy
 80034d0:	623b      	str	r3, [r7, #32]
}
 80034d2:	bf00      	nop
 80034d4:	e7fe      	b.n	80034d4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034d6:	f001 f8d3 	bl	8004680 <xTaskGetSchedulerState>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d102      	bne.n	80034e6 <xQueueGenericSend+0x9e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <xQueueGenericSend+0xa2>
 80034e6:	2301      	movs	r3, #1
 80034e8:	e000      	b.n	80034ec <xQueueGenericSend+0xa4>
 80034ea:	2300      	movs	r3, #0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <xQueueGenericSend+0xbe>
	__asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	61fb      	str	r3, [r7, #28]
}
 8003502:	bf00      	nop
 8003504:	e7fe      	b.n	8003504 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003506:	f001 faf5 	bl	8004af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003512:	429a      	cmp	r2, r3
 8003514:	d302      	bcc.n	800351c <xQueueGenericSend+0xd4>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b02      	cmp	r3, #2
 800351a:	d129      	bne.n	8003570 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003522:	f000 fa0b 	bl	800393c <prvCopyDataToQueue>
 8003526:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	3324      	adds	r3, #36	; 0x24
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fee7 	bl	8004308 <xTaskRemoveFromEventList>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d013      	beq.n	8003568 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003540:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <xQueueGenericSend+0x1f8>)
 8003542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	f3bf 8f6f 	isb	sy
 8003550:	e00a      	b.n	8003568 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003558:	4b39      	ldr	r3, [pc, #228]	; (8003640 <xQueueGenericSend+0x1f8>)
 800355a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003568:	f001 faf4 	bl	8004b54 <vPortExitCritical>
				return pdPASS;
 800356c:	2301      	movs	r3, #1
 800356e:	e063      	b.n	8003638 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003576:	f001 faed 	bl	8004b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800357a:	2300      	movs	r3, #0
 800357c:	e05c      	b.n	8003638 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800357e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003580:	2b00      	cmp	r3, #0
 8003582:	d106      	bne.n	8003592 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	4618      	mov	r0, r3
 800358a:	f000 ff1f 	bl	80043cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800358e:	2301      	movs	r3, #1
 8003590:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003592:	f001 fadf 	bl	8004b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003596:	f000 fcd5 	bl	8003f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800359a:	f001 faab 	bl	8004af4 <vPortEnterCritical>
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035a4:	b25b      	sxtb	r3, r3
 80035a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035aa:	d103      	bne.n	80035b4 <xQueueGenericSend+0x16c>
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c0:	d103      	bne.n	80035ca <xQueueGenericSend+0x182>
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035ca:	f001 fac3 	bl	8004b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ce:	1d3a      	adds	r2, r7, #4
 80035d0:	f107 0314 	add.w	r3, r7, #20
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 ff0e 	bl	80043f8 <xTaskCheckForTimeOut>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d124      	bne.n	800362c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035e4:	f000 faa2 	bl	8003b2c <prvIsQueueFull>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d018      	beq.n	8003620 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f0:	3310      	adds	r3, #16
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4611      	mov	r1, r2
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fe62 	bl	80042c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035fe:	f000 fa2d 	bl	8003a5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003602:	f000 fcad 	bl	8003f60 <xTaskResumeAll>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	f47f af7c 	bne.w	8003506 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800360e:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <xQueueGenericSend+0x1f8>)
 8003610:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	e772      	b.n	8003506 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003622:	f000 fa1b 	bl	8003a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003626:	f000 fc9b 	bl	8003f60 <xTaskResumeAll>
 800362a:	e76c      	b.n	8003506 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800362c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800362e:	f000 fa15 	bl	8003a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003632:	f000 fc95 	bl	8003f60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003636:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003638:	4618      	mov	r0, r3
 800363a:	3738      	adds	r7, #56	; 0x38
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	e000ed04 	.word	0xe000ed04

08003644 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b090      	sub	sp, #64	; 0x40
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800365c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003660:	f383 8811 	msr	BASEPRI, r3
 8003664:	f3bf 8f6f 	isb	sy
 8003668:	f3bf 8f4f 	dsb	sy
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800366e:	bf00      	nop
 8003670:	e7fe      	b.n	8003670 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d103      	bne.n	8003680 <xQueueGenericSendFromISR+0x3c>
 8003678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <xQueueGenericSendFromISR+0x40>
 8003680:	2301      	movs	r3, #1
 8003682:	e000      	b.n	8003686 <xQueueGenericSendFromISR+0x42>
 8003684:	2300      	movs	r3, #0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10a      	bne.n	80036a0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800369c:	bf00      	nop
 800369e:	e7fe      	b.n	800369e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d103      	bne.n	80036ae <xQueueGenericSendFromISR+0x6a>
 80036a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <xQueueGenericSendFromISR+0x6e>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <xQueueGenericSendFromISR+0x70>
 80036b2:	2300      	movs	r3, #0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	623b      	str	r3, [r7, #32]
}
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ce:	f001 faf3 	bl	8004cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036d2:	f3ef 8211 	mrs	r2, BASEPRI
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	61fa      	str	r2, [r7, #28]
 80036e8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036ea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <xQueueGenericSendFromISR+0xbc>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d12f      	bne.n	8003760 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800370a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003716:	f000 f911 	bl	800393c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800371a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800371e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003722:	d112      	bne.n	800374a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003728:	2b00      	cmp	r3, #0
 800372a:	d016      	beq.n	800375a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800372c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800372e:	3324      	adds	r3, #36	; 0x24
 8003730:	4618      	mov	r0, r3
 8003732:	f000 fde9 	bl	8004308 <xTaskRemoveFromEventList>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00b      	beq.n	800375a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e007      	b.n	800375a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800374a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800374e:	3301      	adds	r3, #1
 8003750:	b2db      	uxtb	r3, r3
 8003752:	b25a      	sxtb	r2, r3
 8003754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003756:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800375a:	2301      	movs	r3, #1
 800375c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800375e:	e001      	b.n	8003764 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003760:	2300      	movs	r3, #0
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003766:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800376e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003772:	4618      	mov	r0, r3
 8003774:	3740      	adds	r7, #64	; 0x40
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08c      	sub	sp, #48	; 0x30
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003788:	2300      	movs	r3, #0
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10a      	bne.n	80037ac <xQueueReceive+0x30>
	__asm volatile
 8003796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379a:	f383 8811 	msr	BASEPRI, r3
 800379e:	f3bf 8f6f 	isb	sy
 80037a2:	f3bf 8f4f 	dsb	sy
 80037a6:	623b      	str	r3, [r7, #32]
}
 80037a8:	bf00      	nop
 80037aa:	e7fe      	b.n	80037aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d103      	bne.n	80037ba <xQueueReceive+0x3e>
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <xQueueReceive+0x42>
 80037ba:	2301      	movs	r3, #1
 80037bc:	e000      	b.n	80037c0 <xQueueReceive+0x44>
 80037be:	2300      	movs	r3, #0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <xQueueReceive+0x5e>
	__asm volatile
 80037c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c8:	f383 8811 	msr	BASEPRI, r3
 80037cc:	f3bf 8f6f 	isb	sy
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	61fb      	str	r3, [r7, #28]
}
 80037d6:	bf00      	nop
 80037d8:	e7fe      	b.n	80037d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037da:	f000 ff51 	bl	8004680 <xTaskGetSchedulerState>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d102      	bne.n	80037ea <xQueueReceive+0x6e>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <xQueueReceive+0x72>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <xQueueReceive+0x74>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <xQueueReceive+0x8e>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	61bb      	str	r3, [r7, #24]
}
 8003806:	bf00      	nop
 8003808:	e7fe      	b.n	8003808 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800380a:	f001 f973 	bl	8004af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800380e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01f      	beq.n	800385a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800381e:	f000 f8f7 	bl	8003a10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003824:	1e5a      	subs	r2, r3, #1
 8003826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003828:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00f      	beq.n	8003852 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	3310      	adds	r3, #16
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fd66 	bl	8004308 <xTaskRemoveFromEventList>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003842:	4b3d      	ldr	r3, [pc, #244]	; (8003938 <xQueueReceive+0x1bc>)
 8003844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003852:	f001 f97f 	bl	8004b54 <vPortExitCritical>
				return pdPASS;
 8003856:	2301      	movs	r3, #1
 8003858:	e069      	b.n	800392e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d103      	bne.n	8003868 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003860:	f001 f978 	bl	8004b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003864:	2300      	movs	r3, #0
 8003866:	e062      	b.n	800392e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800386e:	f107 0310 	add.w	r3, r7, #16
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fdaa 	bl	80043cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003878:	2301      	movs	r3, #1
 800387a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800387c:	f001 f96a 	bl	8004b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003880:	f000 fb60 	bl	8003f44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003884:	f001 f936 	bl	8004af4 <vPortEnterCritical>
 8003888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800388e:	b25b      	sxtb	r3, r3
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d103      	bne.n	800389e <xQueueReceive+0x122>
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038a4:	b25b      	sxtb	r3, r3
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038aa:	d103      	bne.n	80038b4 <xQueueReceive+0x138>
 80038ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038b4:	f001 f94e 	bl	8004b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038b8:	1d3a      	adds	r2, r7, #4
 80038ba:	f107 0310 	add.w	r3, r7, #16
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fd99 	bl	80043f8 <xTaskCheckForTimeOut>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d123      	bne.n	8003914 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ce:	f000 f917 	bl	8003b00 <prvIsQueueEmpty>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d017      	beq.n	8003908 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038da:	3324      	adds	r3, #36	; 0x24
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f000 fced 	bl	80042c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e8:	f000 f8b8 	bl	8003a5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038ec:	f000 fb38 	bl	8003f60 <xTaskResumeAll>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d189      	bne.n	800380a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <xQueueReceive+0x1bc>)
 80038f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	f3bf 8f6f 	isb	sy
 8003906:	e780      	b.n	800380a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003908:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800390a:	f000 f8a7 	bl	8003a5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800390e:	f000 fb27 	bl	8003f60 <xTaskResumeAll>
 8003912:	e77a      	b.n	800380a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003916:	f000 f8a1 	bl	8003a5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800391a:	f000 fb21 	bl	8003f60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800391e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003920:	f000 f8ee 	bl	8003b00 <prvIsQueueEmpty>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	f43f af6f 	beq.w	800380a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800392c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800392e:	4618      	mov	r0, r3
 8003930:	3730      	adds	r7, #48	; 0x30
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	e000ed04 	.word	0xe000ed04

0800393c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d14d      	bne.n	80039fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fea8 	bl	80046bc <xTaskPriorityDisinherit>
 800396c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	e043      	b.n	80039fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d119      	bne.n	80039b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6858      	ldr	r0, [r3, #4]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003984:	461a      	mov	r2, r3
 8003986:	68b9      	ldr	r1, [r7, #8]
 8003988:	f001 fc84 	bl	8005294 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d32b      	bcc.n	80039fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	605a      	str	r2, [r3, #4]
 80039ae:	e026      	b.n	80039fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68d8      	ldr	r0, [r3, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	461a      	mov	r2, r3
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	f001 fc6a 	bl	8005294 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	425b      	negs	r3, r3
 80039ca:	441a      	add	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d207      	bcs.n	80039ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689a      	ldr	r2, [r3, #8]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	425b      	negs	r3, r3
 80039e6:	441a      	add	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d105      	bne.n	80039fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003a06:	697b      	ldr	r3, [r7, #20]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d018      	beq.n	8003a54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	441a      	add	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d303      	bcc.n	8003a44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68d9      	ldr	r1, [r3, #12]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6838      	ldr	r0, [r7, #0]
 8003a50:	f001 fc20 	bl	8005294 <memcpy>
	}
}
 8003a54:	bf00      	nop
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a64:	f001 f846 	bl	8004af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a70:	e011      	b.n	8003a96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3324      	adds	r3, #36	; 0x24
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fc42 	bl	8004308 <xTaskRemoveFromEventList>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a8a:	f000 fd17 	bl	80044bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	dce9      	bgt.n	8003a72 <prvUnlockQueue+0x16>
 8003a9e:	e000      	b.n	8003aa2 <prvUnlockQueue+0x46>
					break;
 8003aa0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	22ff      	movs	r2, #255	; 0xff
 8003aa6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003aaa:	f001 f853 	bl	8004b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003aae:	f001 f821 	bl	8004af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ab8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aba:	e011      	b.n	8003ae0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d012      	beq.n	8003aea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	3310      	adds	r3, #16
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fc1d 	bl	8004308 <xTaskRemoveFromEventList>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ad4:	f000 fcf2 	bl	80044bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ad8:	7bbb      	ldrb	r3, [r7, #14]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ae0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dce9      	bgt.n	8003abc <prvUnlockQueue+0x60>
 8003ae8:	e000      	b.n	8003aec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003aea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	22ff      	movs	r2, #255	; 0xff
 8003af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003af4:	f001 f82e 	bl	8004b54 <vPortExitCritical>
}
 8003af8:	bf00      	nop
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b08:	f000 fff4 	bl	8004af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003b14:	2301      	movs	r3, #1
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	e001      	b.n	8003b1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b1e:	f001 f819 	bl	8004b54 <vPortExitCritical>

	return xReturn;
 8003b22:	68fb      	ldr	r3, [r7, #12]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b34:	f000 ffde 	bl	8004af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d102      	bne.n	8003b4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b44:	2301      	movs	r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	e001      	b.n	8003b4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b4e:	f001 f801 	bl	8004b54 <vPortExitCritical>

	return xReturn;
 8003b52:	68fb      	ldr	r3, [r7, #12]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08e      	sub	sp, #56	; 0x38
 8003b60:	af04      	add	r7, sp, #16
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10a      	bne.n	8003b86 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	623b      	str	r3, [r7, #32]
}
 8003b82:	bf00      	nop
 8003b84:	e7fe      	b.n	8003b84 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <xTaskCreateStatic+0x46>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	61fb      	str	r3, [r7, #28]
}
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ba2:	2354      	movs	r3, #84	; 0x54
 8003ba4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	2b54      	cmp	r3, #84	; 0x54
 8003baa:	d00a      	beq.n	8003bc2 <xTaskCreateStatic+0x66>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	61bb      	str	r3, [r7, #24]
}
 8003bbe:	bf00      	nop
 8003bc0:	e7fe      	b.n	8003bc0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003bc2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d01e      	beq.n	8003c08 <xTaskCreateStatic+0xac>
 8003bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01b      	beq.n	8003c08 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bdc:	2202      	movs	r2, #2
 8003bde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003be2:	2300      	movs	r3, #0
 8003be4:	9303      	str	r3, [sp, #12]
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	9302      	str	r3, [sp, #8]
 8003bea:	f107 0314 	add.w	r3, r7, #20
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f850 	bl	8003ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c02:	f000 f8d5 	bl	8003db0 <prvAddNewTaskToReadyList>
 8003c06:	e001      	b.n	8003c0c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c0c:	697b      	ldr	r3, [r7, #20]
	}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3728      	adds	r7, #40	; 0x28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b08c      	sub	sp, #48	; 0x30
 8003c1a:	af04      	add	r7, sp, #16
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	603b      	str	r3, [r7, #0]
 8003c22:	4613      	mov	r3, r2
 8003c24:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f001 f884 	bl	8004d38 <pvPortMalloc>
 8003c30:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00e      	beq.n	8003c56 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003c38:	2054      	movs	r0, #84	; 0x54
 8003c3a:	f001 f87d 	bl	8004d38 <pvPortMalloc>
 8003c3e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c4c:	e005      	b.n	8003c5a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c4e:	6978      	ldr	r0, [r7, #20]
 8003c50:	f001 f93e 	bl	8004ed0 <vPortFree>
 8003c54:	e001      	b.n	8003c5a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d017      	beq.n	8003c90 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c68:	88fa      	ldrh	r2, [r7, #6]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	9303      	str	r3, [sp, #12]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	9302      	str	r3, [sp, #8]
 8003c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c74:	9301      	str	r3, [sp, #4]
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	68b9      	ldr	r1, [r7, #8]
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f80e 	bl	8003ca0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c84:	69f8      	ldr	r0, [r7, #28]
 8003c86:	f000 f893 	bl	8003db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	e002      	b.n	8003c96 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c90:	f04f 33ff 	mov.w	r3, #4294967295
 8003c94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c96:	69bb      	ldr	r3, [r7, #24]
	}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4413      	add	r3, r2
 8003cbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f023 0307 	bic.w	r3, r3, #7
 8003cc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <prvInitialiseNewTask+0x48>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	617b      	str	r3, [r7, #20]
}
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d01f      	beq.n	8003d2e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	e012      	b.n	8003d1a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	7819      	ldrb	r1, [r3, #0]
 8003cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	3334      	adds	r3, #52	; 0x34
 8003d04:	460a      	mov	r2, r1
 8003d06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d006      	beq.n	8003d22 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2b0f      	cmp	r3, #15
 8003d1e:	d9e9      	bls.n	8003cf4 <prvInitialiseNewTask+0x54>
 8003d20:	e000      	b.n	8003d24 <prvInitialiseNewTask+0x84>
			{
				break;
 8003d22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d2c:	e003      	b.n	8003d36 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	2b06      	cmp	r3, #6
 8003d3a:	d901      	bls.n	8003d40 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d3c:	2306      	movs	r3, #6
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d4a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	2200      	movs	r2, #0
 8003d50:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	3304      	adds	r3, #4
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff fa20 	bl	800319c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5e:	3318      	adds	r3, #24
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7ff fa1b 	bl	800319c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6e:	f1c3 0207 	rsb	r2, r3, #7
 8003d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d7e:	2200      	movs	r2, #0
 8003d80:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	68f9      	ldr	r1, [r7, #12]
 8003d8e:	69b8      	ldr	r0, [r7, #24]
 8003d90:	f000 fd80 	bl	8004894 <pxPortInitialiseStack>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003da6:	bf00      	nop
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
	...

08003db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003db8:	f000 fe9c 	bl	8004af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003dbc:	4b2a      	ldr	r3, [pc, #168]	; (8003e68 <prvAddNewTaskToReadyList+0xb8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	4a29      	ldr	r2, [pc, #164]	; (8003e68 <prvAddNewTaskToReadyList+0xb8>)
 8003dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dc6:	4b29      	ldr	r3, [pc, #164]	; (8003e6c <prvAddNewTaskToReadyList+0xbc>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d109      	bne.n	8003de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003dce:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <prvAddNewTaskToReadyList+0xbc>)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dd4:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <prvAddNewTaskToReadyList+0xb8>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d110      	bne.n	8003dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ddc:	f000 fb92 	bl	8004504 <prvInitialiseTaskLists>
 8003de0:	e00d      	b.n	8003dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <prvAddNewTaskToReadyList+0xc0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003dea:	4b20      	ldr	r3, [pc, #128]	; (8003e6c <prvAddNewTaskToReadyList+0xbc>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d802      	bhi.n	8003dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003df8:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <prvAddNewTaskToReadyList+0xbc>)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <prvAddNewTaskToReadyList+0xc4>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <prvAddNewTaskToReadyList+0xc4>)
 8003e06:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <prvAddNewTaskToReadyList+0xc8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <prvAddNewTaskToReadyList+0xc8>)
 8003e18:	6013      	str	r3, [r2, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4a15      	ldr	r2, [pc, #84]	; (8003e7c <prvAddNewTaskToReadyList+0xcc>)
 8003e28:	441a      	add	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f7ff f9c0 	bl	80031b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e36:	f000 fe8d 	bl	8004b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <prvAddNewTaskToReadyList+0xc0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00e      	beq.n	8003e60 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e42:	4b0a      	ldr	r3, [pc, #40]	; (8003e6c <prvAddNewTaskToReadyList+0xbc>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d207      	bcs.n	8003e60 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <prvAddNewTaskToReadyList+0xd0>)
 8003e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e60:	bf00      	nop
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	200003a0 	.word	0x200003a0
 8003e6c:	200002a0 	.word	0x200002a0
 8003e70:	200003ac 	.word	0x200003ac
 8003e74:	200003bc 	.word	0x200003bc
 8003e78:	200003a8 	.word	0x200003a8
 8003e7c:	200002a4 	.word	0x200002a4
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e92:	463a      	mov	r2, r7
 8003e94:	1d39      	adds	r1, r7, #4
 8003e96:	f107 0308 	add.w	r3, r7, #8
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc f9a0 	bl	80001e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	9202      	str	r2, [sp, #8]
 8003ea8:	9301      	str	r3, [sp, #4]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	2300      	movs	r3, #0
 8003eb0:	460a      	mov	r2, r1
 8003eb2:	491e      	ldr	r1, [pc, #120]	; (8003f2c <vTaskStartScheduler+0xa8>)
 8003eb4:	481e      	ldr	r0, [pc, #120]	; (8003f30 <vTaskStartScheduler+0xac>)
 8003eb6:	f7ff fe51 	bl	8003b5c <xTaskCreateStatic>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	4a1d      	ldr	r2, [pc, #116]	; (8003f34 <vTaskStartScheduler+0xb0>)
 8003ebe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	; (8003f34 <vTaskStartScheduler+0xb0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	e001      	b.n	8003ed2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d116      	bne.n	8003f06 <vTaskStartScheduler+0x82>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	613b      	str	r3, [r7, #16]
}
 8003eea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003eec:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <vTaskStartScheduler+0xb4>)
 8003eee:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ef4:	4b11      	ldr	r3, [pc, #68]	; (8003f3c <vTaskStartScheduler+0xb8>)
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003efa:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <vTaskStartScheduler+0xbc>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f00:	f000 fd56 	bl	80049b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f04:	e00e      	b.n	8003f24 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0c:	d10a      	bne.n	8003f24 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	60fb      	str	r3, [r7, #12]
}
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <vTaskStartScheduler+0x9e>
}
 8003f24:	bf00      	nop
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	08005320 	.word	0x08005320
 8003f30:	080044d5 	.word	0x080044d5
 8003f34:	200003c4 	.word	0x200003c4
 8003f38:	200003c0 	.word	0x200003c0
 8003f3c:	200003ac 	.word	0x200003ac
 8003f40:	200003a4 	.word	0x200003a4

08003f44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003f48:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <vTaskSuspendAll+0x18>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	4a03      	ldr	r2, [pc, #12]	; (8003f5c <vTaskSuspendAll+0x18>)
 8003f50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003f52:	bf00      	nop
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	200003c8 	.word	0x200003c8

08003f60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f6e:	4b41      	ldr	r3, [pc, #260]	; (8004074 <xTaskResumeAll+0x114>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <xTaskResumeAll+0x2c>
	__asm volatile
 8003f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7a:	f383 8811 	msr	BASEPRI, r3
 8003f7e:	f3bf 8f6f 	isb	sy
 8003f82:	f3bf 8f4f 	dsb	sy
 8003f86:	603b      	str	r3, [r7, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	e7fe      	b.n	8003f8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f8c:	f000 fdb2 	bl	8004af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f90:	4b38      	ldr	r3, [pc, #224]	; (8004074 <xTaskResumeAll+0x114>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	4a37      	ldr	r2, [pc, #220]	; (8004074 <xTaskResumeAll+0x114>)
 8003f98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f9a:	4b36      	ldr	r3, [pc, #216]	; (8004074 <xTaskResumeAll+0x114>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d161      	bne.n	8004066 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fa2:	4b35      	ldr	r3, [pc, #212]	; (8004078 <xTaskResumeAll+0x118>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d05d      	beq.n	8004066 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003faa:	e02e      	b.n	800400a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fac:	4b33      	ldr	r3, [pc, #204]	; (800407c <xTaskResumeAll+0x11c>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff f959 	bl	8003270 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff f954 	bl	8003270 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fcc:	2201      	movs	r2, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <xTaskResumeAll+0x120>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	4a2a      	ldr	r2, [pc, #168]	; (8004080 <xTaskResumeAll+0x120>)
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	4a27      	ldr	r2, [pc, #156]	; (8004084 <xTaskResumeAll+0x124>)
 8003fe8:	441a      	add	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7ff f8e0 	bl	80031b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ffa:	4b23      	ldr	r3, [pc, #140]	; (8004088 <xTaskResumeAll+0x128>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004004:	4b21      	ldr	r3, [pc, #132]	; (800408c <xTaskResumeAll+0x12c>)
 8004006:	2201      	movs	r2, #1
 8004008:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800400a:	4b1c      	ldr	r3, [pc, #112]	; (800407c <xTaskResumeAll+0x11c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1cc      	bne.n	8003fac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004018:	f000 fb12 	bl	8004640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800401c:	4b1c      	ldr	r3, [pc, #112]	; (8004090 <xTaskResumeAll+0x130>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d010      	beq.n	800404a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004028:	f000 f836 	bl	8004098 <xTaskIncrementTick>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004032:	4b16      	ldr	r3, [pc, #88]	; (800408c <xTaskResumeAll+0x12c>)
 8004034:	2201      	movs	r2, #1
 8004036:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3b01      	subs	r3, #1
 800403c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f1      	bne.n	8004028 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004044:	4b12      	ldr	r3, [pc, #72]	; (8004090 <xTaskResumeAll+0x130>)
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <xTaskResumeAll+0x12c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d009      	beq.n	8004066 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004056:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <xTaskResumeAll+0x134>)
 8004058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004066:	f000 fd75 	bl	8004b54 <vPortExitCritical>

	return xAlreadyYielded;
 800406a:	68bb      	ldr	r3, [r7, #8]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}
 8004074:	200003c8 	.word	0x200003c8
 8004078:	200003a0 	.word	0x200003a0
 800407c:	20000360 	.word	0x20000360
 8004080:	200003a8 	.word	0x200003a8
 8004084:	200002a4 	.word	0x200002a4
 8004088:	200002a0 	.word	0x200002a0
 800408c:	200003b4 	.word	0x200003b4
 8004090:	200003b0 	.word	0x200003b0
 8004094:	e000ed04 	.word	0xe000ed04

08004098 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040a2:	4b4e      	ldr	r3, [pc, #312]	; (80041dc <xTaskIncrementTick+0x144>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 808e 	bne.w	80041c8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040ac:	4b4c      	ldr	r3, [pc, #304]	; (80041e0 <xTaskIncrementTick+0x148>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3301      	adds	r3, #1
 80040b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040b4:	4a4a      	ldr	r2, [pc, #296]	; (80041e0 <xTaskIncrementTick+0x148>)
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d120      	bne.n	8004102 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80040c0:	4b48      	ldr	r3, [pc, #288]	; (80041e4 <xTaskIncrementTick+0x14c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00a      	beq.n	80040e0 <xTaskIncrementTick+0x48>
	__asm volatile
 80040ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ce:	f383 8811 	msr	BASEPRI, r3
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	f3bf 8f4f 	dsb	sy
 80040da:	603b      	str	r3, [r7, #0]
}
 80040dc:	bf00      	nop
 80040de:	e7fe      	b.n	80040de <xTaskIncrementTick+0x46>
 80040e0:	4b40      	ldr	r3, [pc, #256]	; (80041e4 <xTaskIncrementTick+0x14c>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	4b40      	ldr	r3, [pc, #256]	; (80041e8 <xTaskIncrementTick+0x150>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a3e      	ldr	r2, [pc, #248]	; (80041e4 <xTaskIncrementTick+0x14c>)
 80040ec:	6013      	str	r3, [r2, #0]
 80040ee:	4a3e      	ldr	r2, [pc, #248]	; (80041e8 <xTaskIncrementTick+0x150>)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6013      	str	r3, [r2, #0]
 80040f4:	4b3d      	ldr	r3, [pc, #244]	; (80041ec <xTaskIncrementTick+0x154>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	4a3c      	ldr	r2, [pc, #240]	; (80041ec <xTaskIncrementTick+0x154>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	f000 fa9f 	bl	8004640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004102:	4b3b      	ldr	r3, [pc, #236]	; (80041f0 <xTaskIncrementTick+0x158>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	429a      	cmp	r2, r3
 800410a:	d348      	bcc.n	800419e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800410c:	4b35      	ldr	r3, [pc, #212]	; (80041e4 <xTaskIncrementTick+0x14c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d104      	bne.n	8004120 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004116:	4b36      	ldr	r3, [pc, #216]	; (80041f0 <xTaskIncrementTick+0x158>)
 8004118:	f04f 32ff 	mov.w	r2, #4294967295
 800411c:	601a      	str	r2, [r3, #0]
					break;
 800411e:	e03e      	b.n	800419e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004120:	4b30      	ldr	r3, [pc, #192]	; (80041e4 <xTaskIncrementTick+0x14c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	429a      	cmp	r2, r3
 8004136:	d203      	bcs.n	8004140 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004138:	4a2d      	ldr	r2, [pc, #180]	; (80041f0 <xTaskIncrementTick+0x158>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800413e:	e02e      	b.n	800419e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	3304      	adds	r3, #4
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff f893 	bl	8003270 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414e:	2b00      	cmp	r3, #0
 8004150:	d004      	beq.n	800415c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	3318      	adds	r3, #24
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff f88a 	bl	8003270 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	2201      	movs	r2, #1
 8004162:	409a      	lsls	r2, r3
 8004164:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <xTaskIncrementTick+0x15c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4313      	orrs	r3, r2
 800416a:	4a22      	ldr	r2, [pc, #136]	; (80041f4 <xTaskIncrementTick+0x15c>)
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004172:	4613      	mov	r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4a1f      	ldr	r2, [pc, #124]	; (80041f8 <xTaskIncrementTick+0x160>)
 800417c:	441a      	add	r2, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3304      	adds	r3, #4
 8004182:	4619      	mov	r1, r3
 8004184:	4610      	mov	r0, r2
 8004186:	f7ff f816 	bl	80031b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418e:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <xTaskIncrementTick+0x164>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	429a      	cmp	r2, r3
 8004196:	d3b9      	bcc.n	800410c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004198:	2301      	movs	r3, #1
 800419a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800419c:	e7b6      	b.n	800410c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800419e:	4b17      	ldr	r3, [pc, #92]	; (80041fc <xTaskIncrementTick+0x164>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041a4:	4914      	ldr	r1, [pc, #80]	; (80041f8 <xTaskIncrementTick+0x160>)
 80041a6:	4613      	mov	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d901      	bls.n	80041ba <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80041b6:	2301      	movs	r3, #1
 80041b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80041ba:	4b11      	ldr	r3, [pc, #68]	; (8004200 <xTaskIncrementTick+0x168>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d007      	beq.n	80041d2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80041c2:	2301      	movs	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
 80041c6:	e004      	b.n	80041d2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80041c8:	4b0e      	ldr	r3, [pc, #56]	; (8004204 <xTaskIncrementTick+0x16c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3301      	adds	r3, #1
 80041ce:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <xTaskIncrementTick+0x16c>)
 80041d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80041d2:	697b      	ldr	r3, [r7, #20]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	200003c8 	.word	0x200003c8
 80041e0:	200003a4 	.word	0x200003a4
 80041e4:	20000358 	.word	0x20000358
 80041e8:	2000035c 	.word	0x2000035c
 80041ec:	200003b8 	.word	0x200003b8
 80041f0:	200003c0 	.word	0x200003c0
 80041f4:	200003a8 	.word	0x200003a8
 80041f8:	200002a4 	.word	0x200002a4
 80041fc:	200002a0 	.word	0x200002a0
 8004200:	200003b4 	.word	0x200003b4
 8004204:	200003b0 	.word	0x200003b0

08004208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800420e:	4b27      	ldr	r3, [pc, #156]	; (80042ac <vTaskSwitchContext+0xa4>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004216:	4b26      	ldr	r3, [pc, #152]	; (80042b0 <vTaskSwitchContext+0xa8>)
 8004218:	2201      	movs	r2, #1
 800421a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800421c:	e03f      	b.n	800429e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <vTaskSwitchContext+0xa8>)
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004224:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <vTaskSwitchContext+0xac>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	fab3 f383 	clz	r3, r3
 8004230:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004232:	7afb      	ldrb	r3, [r7, #11]
 8004234:	f1c3 031f 	rsb	r3, r3, #31
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	491f      	ldr	r1, [pc, #124]	; (80042b8 <vTaskSwitchContext+0xb0>)
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	4613      	mov	r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	4413      	add	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10a      	bne.n	8004264 <vTaskSwitchContext+0x5c>
	__asm volatile
 800424e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004252:	f383 8811 	msr	BASEPRI, r3
 8004256:	f3bf 8f6f 	isb	sy
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	607b      	str	r3, [r7, #4]
}
 8004260:	bf00      	nop
 8004262:	e7fe      	b.n	8004262 <vTaskSwitchContext+0x5a>
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4a12      	ldr	r2, [pc, #72]	; (80042b8 <vTaskSwitchContext+0xb0>)
 8004270:	4413      	add	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	3308      	adds	r3, #8
 8004286:	429a      	cmp	r2, r3
 8004288:	d104      	bne.n	8004294 <vTaskSwitchContext+0x8c>
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	605a      	str	r2, [r3, #4]
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	4a08      	ldr	r2, [pc, #32]	; (80042bc <vTaskSwitchContext+0xb4>)
 800429c:	6013      	str	r3, [r2, #0]
}
 800429e:	bf00      	nop
 80042a0:	371c      	adds	r7, #28
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	200003c8 	.word	0x200003c8
 80042b0:	200003b4 	.word	0x200003b4
 80042b4:	200003a8 	.word	0x200003a8
 80042b8:	200002a4 	.word	0x200002a4
 80042bc:	200002a0 	.word	0x200002a0

080042c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10a      	bne.n	80042e6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60fb      	str	r3, [r7, #12]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042e6:	4b07      	ldr	r3, [pc, #28]	; (8004304 <vTaskPlaceOnEventList+0x44>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3318      	adds	r3, #24
 80042ec:	4619      	mov	r1, r3
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fe ff85 	bl	80031fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042f4:	2101      	movs	r1, #1
 80042f6:	6838      	ldr	r0, [r7, #0]
 80042f8:	f000 fa66 	bl	80047c8 <prvAddCurrentTaskToDelayedList>
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	200002a0 	.word	0x200002a0

08004308 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10a      	bne.n	8004334 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	60fb      	str	r3, [r7, #12]
}
 8004330:	bf00      	nop
 8004332:	e7fe      	b.n	8004332 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	3318      	adds	r3, #24
 8004338:	4618      	mov	r0, r3
 800433a:	f7fe ff99 	bl	8003270 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433e:	4b1d      	ldr	r3, [pc, #116]	; (80043b4 <xTaskRemoveFromEventList+0xac>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d11c      	bne.n	8004380 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	3304      	adds	r3, #4
 800434a:	4618      	mov	r0, r3
 800434c:	f7fe ff90 	bl	8003270 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	2201      	movs	r2, #1
 8004356:	409a      	lsls	r2, r3
 8004358:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <xTaskRemoveFromEventList+0xb0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4313      	orrs	r3, r2
 800435e:	4a16      	ldr	r2, [pc, #88]	; (80043b8 <xTaskRemoveFromEventList+0xb0>)
 8004360:	6013      	str	r3, [r2, #0]
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4a13      	ldr	r2, [pc, #76]	; (80043bc <xTaskRemoveFromEventList+0xb4>)
 8004370:	441a      	add	r2, r3
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	3304      	adds	r3, #4
 8004376:	4619      	mov	r1, r3
 8004378:	4610      	mov	r0, r2
 800437a:	f7fe ff1c 	bl	80031b6 <vListInsertEnd>
 800437e:	e005      	b.n	800438c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	3318      	adds	r3, #24
 8004384:	4619      	mov	r1, r3
 8004386:	480e      	ldr	r0, [pc, #56]	; (80043c0 <xTaskRemoveFromEventList+0xb8>)
 8004388:	f7fe ff15 	bl	80031b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	4b0c      	ldr	r3, [pc, #48]	; (80043c4 <xTaskRemoveFromEventList+0xbc>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004396:	429a      	cmp	r2, r3
 8004398:	d905      	bls.n	80043a6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800439a:	2301      	movs	r3, #1
 800439c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800439e:	4b0a      	ldr	r3, [pc, #40]	; (80043c8 <xTaskRemoveFromEventList+0xc0>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	e001      	b.n	80043aa <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043aa:	697b      	ldr	r3, [r7, #20]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	200003c8 	.word	0x200003c8
 80043b8:	200003a8 	.word	0x200003a8
 80043bc:	200002a4 	.word	0x200002a4
 80043c0:	20000360 	.word	0x20000360
 80043c4:	200002a0 	.word	0x200002a0
 80043c8:	200003b4 	.word	0x200003b4

080043cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <vTaskInternalSetTimeOutState+0x24>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <vTaskInternalSetTimeOutState+0x28>)
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	605a      	str	r2, [r3, #4]
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	200003b8 	.word	0x200003b8
 80043f4:	200003a4 	.word	0x200003a4

080043f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10a      	bne.n	800441e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440c:	f383 8811 	msr	BASEPRI, r3
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	613b      	str	r3, [r7, #16]
}
 800441a:	bf00      	nop
 800441c:	e7fe      	b.n	800441c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10a      	bne.n	800443a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	60fb      	str	r3, [r7, #12]
}
 8004436:	bf00      	nop
 8004438:	e7fe      	b.n	8004438 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800443a:	f000 fb5b 	bl	8004af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800443e:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <xTaskCheckForTimeOut+0xbc>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d102      	bne.n	800445e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004458:	2300      	movs	r3, #0
 800445a:	61fb      	str	r3, [r7, #28]
 800445c:	e023      	b.n	80044a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b15      	ldr	r3, [pc, #84]	; (80044b8 <xTaskCheckForTimeOut+0xc0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	429a      	cmp	r2, r3
 8004468:	d007      	beq.n	800447a <xTaskCheckForTimeOut+0x82>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	429a      	cmp	r2, r3
 8004472:	d302      	bcc.n	800447a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	61fb      	str	r3, [r7, #28]
 8004478:	e015      	b.n	80044a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	429a      	cmp	r2, r3
 8004482:	d20b      	bcs.n	800449c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff ff9b 	bl	80043cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	e004      	b.n	80044a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044a2:	2301      	movs	r3, #1
 80044a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044a6:	f000 fb55 	bl	8004b54 <vPortExitCritical>

	return xReturn;
 80044aa:	69fb      	ldr	r3, [r7, #28]
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3720      	adds	r7, #32
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	200003a4 	.word	0x200003a4
 80044b8:	200003b8 	.word	0x200003b8

080044bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044c0:	4b03      	ldr	r3, [pc, #12]	; (80044d0 <vTaskMissedYield+0x14>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]
}
 80044c6:	bf00      	nop
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	200003b4 	.word	0x200003b4

080044d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044dc:	f000 f852 	bl	8004584 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044e0:	4b06      	ldr	r3, [pc, #24]	; (80044fc <prvIdleTask+0x28>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d9f9      	bls.n	80044dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80044e8:	4b05      	ldr	r3, [pc, #20]	; (8004500 <prvIdleTask+0x2c>)
 80044ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044f8:	e7f0      	b.n	80044dc <prvIdleTask+0x8>
 80044fa:	bf00      	nop
 80044fc:	200002a4 	.word	0x200002a4
 8004500:	e000ed04 	.word	0xe000ed04

08004504 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800450a:	2300      	movs	r3, #0
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	e00c      	b.n	800452a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <prvInitialiseTaskLists+0x60>)
 800451c:	4413      	add	r3, r2
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fe1c 	bl	800315c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	3301      	adds	r3, #1
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b06      	cmp	r3, #6
 800452e:	d9ef      	bls.n	8004510 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004530:	480d      	ldr	r0, [pc, #52]	; (8004568 <prvInitialiseTaskLists+0x64>)
 8004532:	f7fe fe13 	bl	800315c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004536:	480d      	ldr	r0, [pc, #52]	; (800456c <prvInitialiseTaskLists+0x68>)
 8004538:	f7fe fe10 	bl	800315c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800453c:	480c      	ldr	r0, [pc, #48]	; (8004570 <prvInitialiseTaskLists+0x6c>)
 800453e:	f7fe fe0d 	bl	800315c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004542:	480c      	ldr	r0, [pc, #48]	; (8004574 <prvInitialiseTaskLists+0x70>)
 8004544:	f7fe fe0a 	bl	800315c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004548:	480b      	ldr	r0, [pc, #44]	; (8004578 <prvInitialiseTaskLists+0x74>)
 800454a:	f7fe fe07 	bl	800315c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <prvInitialiseTaskLists+0x78>)
 8004550:	4a05      	ldr	r2, [pc, #20]	; (8004568 <prvInitialiseTaskLists+0x64>)
 8004552:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004554:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <prvInitialiseTaskLists+0x7c>)
 8004556:	4a05      	ldr	r2, [pc, #20]	; (800456c <prvInitialiseTaskLists+0x68>)
 8004558:	601a      	str	r2, [r3, #0]
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	200002a4 	.word	0x200002a4
 8004568:	20000330 	.word	0x20000330
 800456c:	20000344 	.word	0x20000344
 8004570:	20000360 	.word	0x20000360
 8004574:	20000374 	.word	0x20000374
 8004578:	2000038c 	.word	0x2000038c
 800457c:	20000358 	.word	0x20000358
 8004580:	2000035c 	.word	0x2000035c

08004584 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800458a:	e019      	b.n	80045c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800458c:	f000 fab2 	bl	8004af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004590:	4b10      	ldr	r3, [pc, #64]	; (80045d4 <prvCheckTasksWaitingTermination+0x50>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe fe67 	bl	8003270 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045a2:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <prvCheckTasksWaitingTermination+0x54>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	4a0b      	ldr	r2, [pc, #44]	; (80045d8 <prvCheckTasksWaitingTermination+0x54>)
 80045aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045ac:	4b0b      	ldr	r3, [pc, #44]	; (80045dc <prvCheckTasksWaitingTermination+0x58>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <prvCheckTasksWaitingTermination+0x58>)
 80045b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045b6:	f000 facd 	bl	8004b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f810 	bl	80045e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <prvCheckTasksWaitingTermination+0x58>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e1      	bne.n	800458c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	20000374 	.word	0x20000374
 80045d8:	200003a0 	.word	0x200003a0
 80045dc:	20000388 	.word	0x20000388

080045e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d108      	bne.n	8004604 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fc6a 	bl	8004ed0 <vPortFree>
				vPortFree( pxTCB );
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fc67 	bl	8004ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004602:	e018      	b.n	8004636 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800460a:	2b01      	cmp	r3, #1
 800460c:	d103      	bne.n	8004616 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fc5e 	bl	8004ed0 <vPortFree>
	}
 8004614:	e00f      	b.n	8004636 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800461c:	2b02      	cmp	r3, #2
 800461e:	d00a      	beq.n	8004636 <prvDeleteTCB+0x56>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <prvDeleteTCB+0x54>
	}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004646:	4b0c      	ldr	r3, [pc, #48]	; (8004678 <prvResetNextTaskUnblockTime+0x38>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d104      	bne.n	800465a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <prvResetNextTaskUnblockTime+0x3c>)
 8004652:	f04f 32ff 	mov.w	r2, #4294967295
 8004656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004658:	e008      	b.n	800466c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800465a:	4b07      	ldr	r3, [pc, #28]	; (8004678 <prvResetNextTaskUnblockTime+0x38>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a04      	ldr	r2, [pc, #16]	; (800467c <prvResetNextTaskUnblockTime+0x3c>)
 800466a:	6013      	str	r3, [r2, #0]
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr
 8004678:	20000358 	.word	0x20000358
 800467c:	200003c0 	.word	0x200003c0

08004680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <xTaskGetSchedulerState+0x34>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800468e:	2301      	movs	r3, #1
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	e008      	b.n	80046a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <xTaskGetSchedulerState+0x38>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800469c:	2302      	movs	r3, #2
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	e001      	b.n	80046a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046a6:	687b      	ldr	r3, [r7, #4]
	}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr
 80046b4:	200003ac 	.word	0x200003ac
 80046b8:	200003c8 	.word	0x200003c8

080046bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d06e      	beq.n	80047b0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046d2:	4b3a      	ldr	r3, [pc, #232]	; (80047bc <xTaskPriorityDisinherit+0x100>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d00a      	beq.n	80046f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60fb      	str	r3, [r7, #12]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60bb      	str	r3, [r7, #8]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004714:	1e5a      	subs	r2, r3, #1
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	429a      	cmp	r2, r3
 8004724:	d044      	beq.n	80047b0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472a:	2b00      	cmp	r3, #0
 800472c:	d140      	bne.n	80047b0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	3304      	adds	r3, #4
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fd9c 	bl	8003270 <uxListRemove>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d115      	bne.n	800476a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004742:	491f      	ldr	r1, [pc, #124]	; (80047c0 <xTaskPriorityDisinherit+0x104>)
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <xTaskPriorityDisinherit+0xae>
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	2201      	movs	r2, #1
 800475a:	fa02 f303 	lsl.w	r3, r2, r3
 800475e:	43da      	mvns	r2, r3
 8004760:	4b18      	ldr	r3, [pc, #96]	; (80047c4 <xTaskPriorityDisinherit+0x108>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4013      	ands	r3, r2
 8004766:	4a17      	ldr	r2, [pc, #92]	; (80047c4 <xTaskPriorityDisinherit+0x108>)
 8004768:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f1c3 0207 	rsb	r2, r3, #7
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	2201      	movs	r2, #1
 8004784:	409a      	lsls	r2, r3
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <xTaskPriorityDisinherit+0x108>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4313      	orrs	r3, r2
 800478c:	4a0d      	ldr	r2, [pc, #52]	; (80047c4 <xTaskPriorityDisinherit+0x108>)
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4a08      	ldr	r2, [pc, #32]	; (80047c0 <xTaskPriorityDisinherit+0x104>)
 800479e:	441a      	add	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f7fe fd05 	bl	80031b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047b0:	697b      	ldr	r3, [r7, #20]
	}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	200002a0 	.word	0x200002a0
 80047c0:	200002a4 	.word	0x200002a4
 80047c4:	200003a8 	.word	0x200003a8

080047c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047d2:	4b29      	ldr	r3, [pc, #164]	; (8004878 <prvAddCurrentTaskToDelayedList+0xb0>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d8:	4b28      	ldr	r3, [pc, #160]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	3304      	adds	r3, #4
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fe fd46 	bl	8003270 <uxListRemove>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f0:	2201      	movs	r2, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	43da      	mvns	r2, r3
 80047f8:	4b21      	ldr	r3, [pc, #132]	; (8004880 <prvAddCurrentTaskToDelayedList+0xb8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4013      	ands	r3, r2
 80047fe:	4a20      	ldr	r2, [pc, #128]	; (8004880 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004800:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004808:	d10a      	bne.n	8004820 <prvAddCurrentTaskToDelayedList+0x58>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d007      	beq.n	8004820 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	481a      	ldr	r0, [pc, #104]	; (8004884 <prvAddCurrentTaskToDelayedList+0xbc>)
 800481a:	f7fe fccc 	bl	80031b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800481e:	e026      	b.n	800486e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4413      	add	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004828:	4b14      	ldr	r3, [pc, #80]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68ba      	ldr	r2, [r7, #8]
 800482e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	429a      	cmp	r2, r3
 8004836:	d209      	bcs.n	800484c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004838:	4b13      	ldr	r3, [pc, #76]	; (8004888 <prvAddCurrentTaskToDelayedList+0xc0>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f7fe fcda 	bl	80031fe <vListInsert>
}
 800484a:	e010      	b.n	800486e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <prvAddCurrentTaskToDelayedList+0xc4>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	4b0a      	ldr	r3, [pc, #40]	; (800487c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	3304      	adds	r3, #4
 8004856:	4619      	mov	r1, r3
 8004858:	4610      	mov	r0, r2
 800485a:	f7fe fcd0 	bl	80031fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800485e:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	d202      	bcs.n	800486e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004868:	4a09      	ldr	r2, [pc, #36]	; (8004890 <prvAddCurrentTaskToDelayedList+0xc8>)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6013      	str	r3, [r2, #0]
}
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200003a4 	.word	0x200003a4
 800487c:	200002a0 	.word	0x200002a0
 8004880:	200003a8 	.word	0x200003a8
 8004884:	2000038c 	.word	0x2000038c
 8004888:	2000035c 	.word	0x2000035c
 800488c:	20000358 	.word	0x20000358
 8004890:	200003c0 	.word	0x200003c0

08004894 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3b04      	subs	r3, #4
 80048a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	3b04      	subs	r3, #4
 80048b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f023 0201 	bic.w	r2, r3, #1
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	3b04      	subs	r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048c4:	4a0c      	ldr	r2, [pc, #48]	; (80048f8 <pxPortInitialiseStack+0x64>)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3b14      	subs	r3, #20
 80048ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3b04      	subs	r3, #4
 80048da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f06f 0202 	mvn.w	r2, #2
 80048e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3b20      	subs	r3, #32
 80048e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048ea:	68fb      	ldr	r3, [r7, #12]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	080048fd 	.word	0x080048fd

080048fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004902:	2300      	movs	r3, #0
 8004904:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <prvTaskExitError+0x54>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490e:	d00a      	beq.n	8004926 <prvTaskExitError+0x2a>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	60fb      	str	r3, [r7, #12]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <prvTaskExitError+0x28>
	__asm volatile
 8004926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492a:	f383 8811 	msr	BASEPRI, r3
 800492e:	f3bf 8f6f 	isb	sy
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	60bb      	str	r3, [r7, #8]
}
 8004938:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800493a:	bf00      	nop
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0fc      	beq.n	800493c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004942:	bf00      	nop
 8004944:	bf00      	nop
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	20000010 	.word	0x20000010
	...

08004960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <pxCurrentTCBConst2>)
 8004962:	6819      	ldr	r1, [r3, #0]
 8004964:	6808      	ldr	r0, [r1, #0]
 8004966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496a:	f380 8809 	msr	PSP, r0
 800496e:	f3bf 8f6f 	isb	sy
 8004972:	f04f 0000 	mov.w	r0, #0
 8004976:	f380 8811 	msr	BASEPRI, r0
 800497a:	4770      	bx	lr
 800497c:	f3af 8000 	nop.w

08004980 <pxCurrentTCBConst2>:
 8004980:	200002a0 	.word	0x200002a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004984:	bf00      	nop
 8004986:	bf00      	nop

08004988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004988:	4808      	ldr	r0, [pc, #32]	; (80049ac <prvPortStartFirstTask+0x24>)
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	6800      	ldr	r0, [r0, #0]
 800498e:	f380 8808 	msr	MSP, r0
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8814 	msr	CONTROL, r0
 800499a:	b662      	cpsie	i
 800499c:	b661      	cpsie	f
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	df00      	svc	0
 80049a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049aa:	bf00      	nop
 80049ac:	e000ed08 	.word	0xe000ed08

080049b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049b6:	4b46      	ldr	r3, [pc, #280]	; (8004ad0 <xPortStartScheduler+0x120>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a46      	ldr	r2, [pc, #280]	; (8004ad4 <xPortStartScheduler+0x124>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d10a      	bne.n	80049d6 <xPortStartScheduler+0x26>
	__asm volatile
 80049c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c4:	f383 8811 	msr	BASEPRI, r3
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	f3bf 8f4f 	dsb	sy
 80049d0:	613b      	str	r3, [r7, #16]
}
 80049d2:	bf00      	nop
 80049d4:	e7fe      	b.n	80049d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049d6:	4b3e      	ldr	r3, [pc, #248]	; (8004ad0 <xPortStartScheduler+0x120>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3f      	ldr	r2, [pc, #252]	; (8004ad8 <xPortStartScheduler+0x128>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d10a      	bne.n	80049f6 <xPortStartScheduler+0x46>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	60fb      	str	r3, [r7, #12]
}
 80049f2:	bf00      	nop
 80049f4:	e7fe      	b.n	80049f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049f6:	4b39      	ldr	r3, [pc, #228]	; (8004adc <xPortStartScheduler+0x12c>)
 80049f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	22ff      	movs	r2, #255	; 0xff
 8004a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a10:	78fb      	ldrb	r3, [r7, #3]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	4b31      	ldr	r3, [pc, #196]	; (8004ae0 <xPortStartScheduler+0x130>)
 8004a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a1e:	4b31      	ldr	r3, [pc, #196]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a20:	2207      	movs	r2, #7
 8004a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a24:	e009      	b.n	8004a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	005b      	lsls	r3, r3, #1
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a3a:	78fb      	ldrb	r3, [r7, #3]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a42:	2b80      	cmp	r3, #128	; 0x80
 8004a44:	d0ef      	beq.n	8004a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a46:	4b27      	ldr	r3, [pc, #156]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1c3 0307 	rsb	r3, r3, #7
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d00a      	beq.n	8004a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	60bb      	str	r3, [r7, #8]
}
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a68:	4b1e      	ldr	r3, [pc, #120]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	021b      	lsls	r3, r3, #8
 8004a6e:	4a1d      	ldr	r2, [pc, #116]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a72:	4b1c      	ldr	r3, [pc, #112]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <xPortStartScheduler+0x134>)
 8004a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a86:	4b18      	ldr	r3, [pc, #96]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a17      	ldr	r2, [pc, #92]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <xPortStartScheduler+0x138>)
 8004a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a9e:	f000 f8dd 	bl	8004c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <xPortStartScheduler+0x13c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004aa8:	f000 f8fc 	bl	8004ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004aac:	4b10      	ldr	r3, [pc, #64]	; (8004af0 <xPortStartScheduler+0x140>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a0f      	ldr	r2, [pc, #60]	; (8004af0 <xPortStartScheduler+0x140>)
 8004ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ab8:	f7ff ff66 	bl	8004988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004abc:	f7ff fba4 	bl	8004208 <vTaskSwitchContext>
	prvTaskExitError();
 8004ac0:	f7ff ff1c 	bl	80048fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	e000ed00 	.word	0xe000ed00
 8004ad4:	410fc271 	.word	0x410fc271
 8004ad8:	410fc270 	.word	0x410fc270
 8004adc:	e000e400 	.word	0xe000e400
 8004ae0:	200003cc 	.word	0x200003cc
 8004ae4:	200003d0 	.word	0x200003d0
 8004ae8:	e000ed20 	.word	0xe000ed20
 8004aec:	20000010 	.word	0x20000010
 8004af0:	e000ef34 	.word	0xe000ef34

08004af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	607b      	str	r3, [r7, #4]
}
 8004b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <vPortEnterCritical+0x58>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a0d      	ldr	r2, [pc, #52]	; (8004b4c <vPortEnterCritical+0x58>)
 8004b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <vPortEnterCritical+0x58>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d10f      	bne.n	8004b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b20:	4b0b      	ldr	r3, [pc, #44]	; (8004b50 <vPortEnterCritical+0x5c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	603b      	str	r3, [r7, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <vPortEnterCritical+0x4a>
	}
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	20000010 	.word	0x20000010
 8004b50:	e000ed04 	.word	0xe000ed04

08004b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b54:	b480      	push	{r7}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10a      	bne.n	8004b78 <vPortExitCritical+0x24>
	__asm volatile
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	f383 8811 	msr	BASEPRI, r3
 8004b6a:	f3bf 8f6f 	isb	sy
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	607b      	str	r3, [r7, #4]
}
 8004b74:	bf00      	nop
 8004b76:	e7fe      	b.n	8004b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b78:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b82:	4b08      	ldr	r3, [pc, #32]	; (8004ba4 <vPortExitCritical+0x50>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d105      	bne.n	8004b96 <vPortExitCritical+0x42>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	f383 8811 	msr	BASEPRI, r3
}
 8004b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b96:	bf00      	nop
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	20000010 	.word	0x20000010
	...

08004bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004bb0:	f3ef 8009 	mrs	r0, PSP
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <pxCurrentTCBConst>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	f01e 0f10 	tst.w	lr, #16
 8004bc0:	bf08      	it	eq
 8004bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bca:	6010      	str	r0, [r2, #0]
 8004bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bd4:	f380 8811 	msr	BASEPRI, r0
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f7ff fb12 	bl	8004208 <vTaskSwitchContext>
 8004be4:	f04f 0000 	mov.w	r0, #0
 8004be8:	f380 8811 	msr	BASEPRI, r0
 8004bec:	bc09      	pop	{r0, r3}
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	6808      	ldr	r0, [r1, #0]
 8004bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf6:	f01e 0f10 	tst.w	lr, #16
 8004bfa:	bf08      	it	eq
 8004bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c00:	f380 8809 	msr	PSP, r0
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	f3af 8000 	nop.w

08004c10 <pxCurrentTCBConst>:
 8004c10:	200002a0 	.word	0x200002a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop

08004c18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b082      	sub	sp, #8
 8004c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c32:	f7ff fa31 	bl	8004098 <xTaskIncrementTick>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <xPortSysTickHandler+0x40>)
 8004c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	2300      	movs	r3, #0
 8004c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f383 8811 	msr	BASEPRI, r3
}
 8004c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	e000ed04 	.word	0xe000ed04

08004c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c60:	4b0b      	ldr	r3, [pc, #44]	; (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c66:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <vPortSetupTimerInterrupt+0x38>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <vPortSetupTimerInterrupt+0x3c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <vPortSetupTimerInterrupt+0x40>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	099b      	lsrs	r3, r3, #6
 8004c78:	4a09      	ldr	r2, [pc, #36]	; (8004ca0 <vPortSetupTimerInterrupt+0x44>)
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c7e:	4b04      	ldr	r3, [pc, #16]	; (8004c90 <vPortSetupTimerInterrupt+0x34>)
 8004c80:	2207      	movs	r2, #7
 8004c82:	601a      	str	r2, [r3, #0]
}
 8004c84:	bf00      	nop
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	e000e010 	.word	0xe000e010
 8004c94:	e000e018 	.word	0xe000e018
 8004c98:	20000004 	.word	0x20000004
 8004c9c:	10624dd3 	.word	0x10624dd3
 8004ca0:	e000e014 	.word	0xe000e014

08004ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004cb4 <vPortEnableVFP+0x10>
 8004ca8:	6801      	ldr	r1, [r0, #0]
 8004caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004cae:	6001      	str	r1, [r0, #0]
 8004cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004cb2:	bf00      	nop
 8004cb4:	e000ed88 	.word	0xe000ed88

08004cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cbe:	f3ef 8305 	mrs	r3, IPSR
 8004cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	d914      	bls.n	8004cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cca:	4a17      	ldr	r2, [pc, #92]	; (8004d28 <vPortValidateInterruptPriority+0x70>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cd4:	4b15      	ldr	r3, [pc, #84]	; (8004d2c <vPortValidateInterruptPriority+0x74>)
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	7afa      	ldrb	r2, [r7, #11]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d20a      	bcs.n	8004cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	607b      	str	r3, [r7, #4]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004cf4:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <vPortValidateInterruptPriority+0x78>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <vPortValidateInterruptPriority+0x7c>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d90a      	bls.n	8004d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	603b      	str	r3, [r7, #0]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <vPortValidateInterruptPriority+0x60>
	}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	e000e3f0 	.word	0xe000e3f0
 8004d2c:	200003cc 	.word	0x200003cc
 8004d30:	e000ed0c 	.word	0xe000ed0c
 8004d34:	200003d0 	.word	0x200003d0

08004d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d44:	f7ff f8fe 	bl	8003f44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d48:	4b5b      	ldr	r3, [pc, #364]	; (8004eb8 <pvPortMalloc+0x180>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d50:	f000 f920 	bl	8004f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d54:	4b59      	ldr	r3, [pc, #356]	; (8004ebc <pvPortMalloc+0x184>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f040 8093 	bne.w	8004e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d01d      	beq.n	8004da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d68:	2208      	movs	r2, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d014      	beq.n	8004da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f023 0307 	bic.w	r3, r3, #7
 8004d80:	3308      	adds	r3, #8
 8004d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <pvPortMalloc+0x6c>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	617b      	str	r3, [r7, #20]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d06e      	beq.n	8004e88 <pvPortMalloc+0x150>
 8004daa:	4b45      	ldr	r3, [pc, #276]	; (8004ec0 <pvPortMalloc+0x188>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d869      	bhi.n	8004e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004db4:	4b43      	ldr	r3, [pc, #268]	; (8004ec4 <pvPortMalloc+0x18c>)
 8004db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004db8:	4b42      	ldr	r3, [pc, #264]	; (8004ec4 <pvPortMalloc+0x18c>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dbe:	e004      	b.n	8004dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d903      	bls.n	8004ddc <pvPortMalloc+0xa4>
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1f1      	bne.n	8004dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ddc:	4b36      	ldr	r3, [pc, #216]	; (8004eb8 <pvPortMalloc+0x180>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d050      	beq.n	8004e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2208      	movs	r2, #8
 8004dec:	4413      	add	r3, r2
 8004dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	1ad2      	subs	r2, r2, r3
 8004e00:	2308      	movs	r3, #8
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d91f      	bls.n	8004e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <pvPortMalloc+0xf8>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	613b      	str	r3, [r7, #16]
}
 8004e2c:	bf00      	nop
 8004e2e:	e7fe      	b.n	8004e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	1ad2      	subs	r2, r2, r3
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e42:	69b8      	ldr	r0, [r7, #24]
 8004e44:	f000 f908 	bl	8005058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e48:	4b1d      	ldr	r3, [pc, #116]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	4a1b      	ldr	r2, [pc, #108]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <pvPortMalloc+0x190>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d203      	bcs.n	8004e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e62:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <pvPortMalloc+0x188>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a18      	ldr	r2, [pc, #96]	; (8004ec8 <pvPortMalloc+0x190>)
 8004e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <pvPortMalloc+0x184>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	431a      	orrs	r2, r3
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e7e:	4b13      	ldr	r3, [pc, #76]	; (8004ecc <pvPortMalloc+0x194>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3301      	adds	r3, #1
 8004e84:	4a11      	ldr	r2, [pc, #68]	; (8004ecc <pvPortMalloc+0x194>)
 8004e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e88:	f7ff f86a 	bl	8003f60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <pvPortMalloc+0x174>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	60fb      	str	r3, [r7, #12]
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <pvPortMalloc+0x172>
	return pvReturn;
 8004eac:	69fb      	ldr	r3, [r7, #28]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3728      	adds	r7, #40	; 0x28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	20003fdc 	.word	0x20003fdc
 8004ebc:	20003ff0 	.word	0x20003ff0
 8004ec0:	20003fe0 	.word	0x20003fe0
 8004ec4:	20003fd4 	.word	0x20003fd4
 8004ec8:	20003fe4 	.word	0x20003fe4
 8004ecc:	20003fe8 	.word	0x20003fe8

08004ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d04d      	beq.n	8004f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ee2:	2308      	movs	r3, #8
 8004ee4:	425b      	negs	r3, r3
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	4413      	add	r3, r2
 8004eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	4b24      	ldr	r3, [pc, #144]	; (8004f88 <vPortFree+0xb8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d10a      	bne.n	8004f14 <vPortFree+0x44>
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	60fb      	str	r3, [r7, #12]
}
 8004f10:	bf00      	nop
 8004f12:	e7fe      	b.n	8004f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <vPortFree+0x62>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	60bb      	str	r3, [r7, #8]
}
 8004f2e:	bf00      	nop
 8004f30:	e7fe      	b.n	8004f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	685a      	ldr	r2, [r3, #4]
 8004f36:	4b14      	ldr	r3, [pc, #80]	; (8004f88 <vPortFree+0xb8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d01e      	beq.n	8004f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d11a      	bne.n	8004f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <vPortFree+0xb8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	43db      	mvns	r3, r3
 8004f52:	401a      	ands	r2, r3
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f58:	f7fe fff4 	bl	8003f44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <vPortFree+0xbc>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4413      	add	r3, r2
 8004f66:	4a09      	ldr	r2, [pc, #36]	; (8004f8c <vPortFree+0xbc>)
 8004f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f6a:	6938      	ldr	r0, [r7, #16]
 8004f6c:	f000 f874 	bl	8005058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <vPortFree+0xc0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	4a06      	ldr	r2, [pc, #24]	; (8004f90 <vPortFree+0xc0>)
 8004f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f7a:	f7fe fff1 	bl	8003f60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f7e:	bf00      	nop
 8004f80:	3718      	adds	r7, #24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20003ff0 	.word	0x20003ff0
 8004f8c:	20003fe0 	.word	0x20003fe0
 8004f90:	20003fec 	.word	0x20003fec

08004f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004fa0:	4b27      	ldr	r3, [pc, #156]	; (8005040 <prvHeapInit+0xac>)
 8004fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f003 0307 	and.w	r3, r3, #7
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d00c      	beq.n	8004fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3307      	adds	r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0307 	bic.w	r3, r3, #7
 8004fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	4a1f      	ldr	r2, [pc, #124]	; (8005040 <prvHeapInit+0xac>)
 8004fc4:	4413      	add	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fcc:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <prvHeapInit+0xb0>)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fd2:	4b1c      	ldr	r3, [pc, #112]	; (8005044 <prvHeapInit+0xb0>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68ba      	ldr	r2, [r7, #8]
 8004fdc:	4413      	add	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0307 	bic.w	r3, r3, #7
 8004fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	4a15      	ldr	r2, [pc, #84]	; (8005048 <prvHeapInit+0xb4>)
 8004ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <prvHeapInit+0xb4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004ffe:	4b12      	ldr	r3, [pc, #72]	; (8005048 <prvHeapInit+0xb4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005014:	4b0c      	ldr	r3, [pc, #48]	; (8005048 <prvHeapInit+0xb4>)
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a0a      	ldr	r2, [pc, #40]	; (800504c <prvHeapInit+0xb8>)
 8005022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a09      	ldr	r2, [pc, #36]	; (8005050 <prvHeapInit+0xbc>)
 800502a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800502c:	4b09      	ldr	r3, [pc, #36]	; (8005054 <prvHeapInit+0xc0>)
 800502e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005032:	601a      	str	r2, [r3, #0]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	200003d4 	.word	0x200003d4
 8005044:	20003fd4 	.word	0x20003fd4
 8005048:	20003fdc 	.word	0x20003fdc
 800504c:	20003fe4 	.word	0x20003fe4
 8005050:	20003fe0 	.word	0x20003fe0
 8005054:	20003ff0 	.word	0x20003ff0

08005058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005060:	4b28      	ldr	r3, [pc, #160]	; (8005104 <prvInsertBlockIntoFreeList+0xac>)
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	e002      	b.n	800506c <prvInsertBlockIntoFreeList+0x14>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	429a      	cmp	r2, r3
 8005074:	d8f7      	bhi.n	8005066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	4413      	add	r3, r2
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	429a      	cmp	r2, r3
 8005086:	d108      	bne.n	800509a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685a      	ldr	r2, [r3, #4]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	441a      	add	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	68ba      	ldr	r2, [r7, #8]
 80050a4:	441a      	add	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d118      	bne.n	80050e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b15      	ldr	r3, [pc, #84]	; (8005108 <prvInsertBlockIntoFreeList+0xb0>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d00d      	beq.n	80050d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	441a      	add	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	e008      	b.n	80050e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <prvInsertBlockIntoFreeList+0xb0>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	e003      	b.n	80050e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d002      	beq.n	80050f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050f6:	bf00      	nop
 80050f8:	3714      	adds	r7, #20
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20003fd4 	.word	0x20003fd4
 8005108:	20003fdc 	.word	0x20003fdc

0800510c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd fe84 	bl	8002e28 <USBH_LL_IncTimer>
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005136:	4618      	mov	r0, r3
 8005138:	f7fd fec8 	bl	8002ecc <USBH_LL_Connect>
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005152:	4618      	mov	r0, r3
 8005154:	f7fd fedd 	bl	8002f12 <USBH_LL_Disconnect>
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	70fb      	strb	r3, [r7, #3]
 800516c:	4613      	mov	r3, r2
 800516e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005176:	4618      	mov	r0, r3
 8005178:	f7fd fefd 	bl	8002f76 <USBH_LL_NotifyURBChange>
#endif
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8005192:	4618      	mov	r0, r3
 8005194:	f7fd fe72 	bl	8002e7c <USBH_LL_PortEnabled>
}
 8005198:	bf00      	nop
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7fd fe7e 	bl	8002eb0 <USBH_LL_PortDisabled>
}
 80051b4:	bf00      	nop
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fc fa40 	bl	8001658 <HAL_HCD_Stop>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 f808 	bl	80051f4 <USBH_Get_USB_Status>
 80051e4:	4603      	mov	r3, r0
 80051e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80051e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005202:	79fb      	ldrb	r3, [r7, #7]
 8005204:	2b03      	cmp	r3, #3
 8005206:	d817      	bhi.n	8005238 <USBH_Get_USB_Status+0x44>
 8005208:	a201      	add	r2, pc, #4	; (adr r2, 8005210 <USBH_Get_USB_Status+0x1c>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005221 	.word	0x08005221
 8005214:	08005227 	.word	0x08005227
 8005218:	0800522d 	.word	0x0800522d
 800521c:	08005233 	.word	0x08005233
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	73fb      	strb	r3, [r7, #15]
    break;
 8005224:	e00b      	b.n	800523e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8005226:	2302      	movs	r3, #2
 8005228:	73fb      	strb	r3, [r7, #15]
    break;
 800522a:	e008      	b.n	800523e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800522c:	2301      	movs	r3, #1
 800522e:	73fb      	strb	r3, [r7, #15]
    break;
 8005230:	e005      	b.n	800523e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8005232:	2302      	movs	r3, #2
 8005234:	73fb      	strb	r3, [r7, #15]
    break;
 8005236:	e002      	b.n	800523e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8005238:	2302      	movs	r3, #2
 800523a:	73fb      	strb	r3, [r7, #15]
    break;
 800523c:	bf00      	nop
  }
  return usb_status;
 800523e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005240:	4618      	mov	r0, r3
 8005242:	3714      	adds	r7, #20
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <__libc_init_array>:
 800524c:	b570      	push	{r4, r5, r6, lr}
 800524e:	4d0d      	ldr	r5, [pc, #52]	; (8005284 <__libc_init_array+0x38>)
 8005250:	4c0d      	ldr	r4, [pc, #52]	; (8005288 <__libc_init_array+0x3c>)
 8005252:	1b64      	subs	r4, r4, r5
 8005254:	10a4      	asrs	r4, r4, #2
 8005256:	2600      	movs	r6, #0
 8005258:	42a6      	cmp	r6, r4
 800525a:	d109      	bne.n	8005270 <__libc_init_array+0x24>
 800525c:	4d0b      	ldr	r5, [pc, #44]	; (800528c <__libc_init_array+0x40>)
 800525e:	4c0c      	ldr	r4, [pc, #48]	; (8005290 <__libc_init_array+0x44>)
 8005260:	f000 f826 	bl	80052b0 <_init>
 8005264:	1b64      	subs	r4, r4, r5
 8005266:	10a4      	asrs	r4, r4, #2
 8005268:	2600      	movs	r6, #0
 800526a:	42a6      	cmp	r6, r4
 800526c:	d105      	bne.n	800527a <__libc_init_array+0x2e>
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	f855 3b04 	ldr.w	r3, [r5], #4
 8005274:	4798      	blx	r3
 8005276:	3601      	adds	r6, #1
 8005278:	e7ee      	b.n	8005258 <__libc_init_array+0xc>
 800527a:	f855 3b04 	ldr.w	r3, [r5], #4
 800527e:	4798      	blx	r3
 8005280:	3601      	adds	r6, #1
 8005282:	e7f2      	b.n	800526a <__libc_init_array+0x1e>
 8005284:	08005328 	.word	0x08005328
 8005288:	08005328 	.word	0x08005328
 800528c:	08005328 	.word	0x08005328
 8005290:	0800532c 	.word	0x0800532c

08005294 <memcpy>:
 8005294:	440a      	add	r2, r1
 8005296:	4291      	cmp	r1, r2
 8005298:	f100 33ff 	add.w	r3, r0, #4294967295
 800529c:	d100      	bne.n	80052a0 <memcpy+0xc>
 800529e:	4770      	bx	lr
 80052a0:	b510      	push	{r4, lr}
 80052a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052aa:	4291      	cmp	r1, r2
 80052ac:	d1f9      	bne.n	80052a2 <memcpy+0xe>
 80052ae:	bd10      	pop	{r4, pc}

080052b0 <_init>:
 80052b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b2:	bf00      	nop
 80052b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052b6:	bc08      	pop	{r3}
 80052b8:	469e      	mov	lr, r3
 80052ba:	4770      	bx	lr

080052bc <_fini>:
 80052bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052be:	bf00      	nop
 80052c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c2:	bc08      	pop	{r3}
 80052c4:	469e      	mov	lr, r3
 80052c6:	4770      	bx	lr
